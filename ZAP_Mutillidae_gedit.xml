<?xml version="1.0" encoding="UTF-8"?><OWASPZAPReport generated="Tue, 13 Jan 2015 13:14:56" version="2.3.1">
<site host="172.16.162.128" name="http://172.16.162.128" port="80" ssl="false"><alerts><alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae</uri>
  <param>PHPSESSID=be9d4f7bd80c85c280eff68cc27d9b72; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=be9d4f7bd80c85c280eff68cc27d9b72; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>2</pluginid>
  <alert>Private IP disclosure</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A private IP such as 10.x.x.x, 172.x.x.x, 192.168.x.x has been found in the HTTP response body.  This information might be helpful for further attacks targeting internal systems.
	</desc>
  <uri>http://172.16.162.128/mutillidae</uri>
  <param/>
  <attack>172.16.162.128</attack>
  <otherinfo>172.16.162.128
172.16.162.128
</otherinfo>
  <evidence>172.16.162.128</evidence>
  <solution>Remove the private IP address from the HTTP response body.  For comments, use JSP/ASP comment instead of HTML/JavaScript comment which can be seen by client browsers.
	</solution>
  <otherinfo>172.16.162.128
	172.16.162.128
	
	</otherinfo>
  <reference>
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/</uri>
  <param>PHPSESSID=20fe7a919ce08f58a57de5052760d459; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=20fe7a919ce08f58a57de5052760d459; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=home.php</uri>
  <param>PHPSESSID=65d97996993605571344c40b3949b342; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=65d97996993605571344c40b3949b342; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=home.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=home.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=login.php</uri>
  <param>PHPSESSID=6fe51e5480a504f6a6f2e4d21448bf0f; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=6fe51e5480a504f6a6f2e4d21448bf0f; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=login.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=login.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10012</pluginid>
  <alert>Password Autocomplete in browser</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>AUTOCOMPLETE attribute is not disabled in HTML FORM/INPUT element containing password type input.  Passwords may be stored in browsers and retrieved.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=login.php</uri>
  <param>input</param>
  <attack>&lt;input type="password" name="password" maxlength="20" size="20"&gt;</attack>
  <otherinfo/>
  <solution>Turn off AUTOCOMPLETE attribute in form or individual input elements containing password by using AUTOCOMPLETE='OFF'
	</solution>
  <reference>http://msdn.microsoft.com/library/default.asp?url=/workshop/author/forms/autocomplete_ovr.asp
	</reference>
  <cweid>525</cweid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=home.php</uri>
  <param>PHPSESSID=3c3d5541c1d1fb9207fc3a227dbd1cae; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=3c3d5541c1d1fb9207fc3a227dbd1cae; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=home.php</uri>
  <param>showhints=1</param>
  <attack/>
  <otherinfo/>
  <evidence>showhints=1</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-security&amp;page=home.php</uri>
  <param>PHPSESSID=b3f6d06764c10a0444f55a1c4ff0bdc2; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=b3f6d06764c10a0444f55a1c4ff0bdc2; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>90022</pluginid>
  <alert>Application Error disclosure</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application.The alert could be a false positive if the error message is found inside a documentation page.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=show-log.php</uri>
  <param>N/A</param>
  <attack>Table 'metasploit.hitlog' doesn't exist</attack>
  <otherinfo/>
  <evidence>Table 'metasploit.hitlog' doesn't exist</evidence>
  <solution>Review the source code of this page
	</solution>
  <reference>
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=show-log.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=show-log.php</uri>
  <param>PHPSESSID=5748a68139120edbfd059cd1e358194a; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=5748a68139120edbfd059cd1e358194a; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=show-log.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/set-up-database.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/set-up-database.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=credits.php</uri>
  <param>PHPSESSID=d37acf1180c2f2cd216be3ad1f496a67; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=d37acf1180c2f2cd216be3ad1f496a67; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=credits.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=credits.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=captured-data.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>90022</pluginid>
  <alert>Application Error disclosure</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application.The alert could be a false positive if the error message is found inside a documentation page.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=captured-data.php</uri>
  <param>N/A</param>
  <attack>Table 'metasploit.captured_data' doesn't exist</attack>
  <otherinfo/>
  <evidence>Table 'metasploit.captured_data' doesn't exist</evidence>
  <solution>Review the source code of this page
	</solution>
  <reference>
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=captured-data.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=captured-data.php</uri>
  <param>PHPSESSID=8d7e02a7a4c59bf4a0e510e45e46c6f3; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=8d7e02a7a4c59bf4a0e510e45e46c6f3; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=user-info.php</uri>
  <param>PHPSESSID=7db862840ce566bc6081ba315c20aea4; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=7db862840ce566bc6081ba315c20aea4; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10012</pluginid>
  <alert>Password Autocomplete in browser</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>AUTOCOMPLETE attribute is not disabled in HTML FORM/INPUT element containing password type input.  Passwords may be stored in browsers and retrieved.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=user-info.php</uri>
  <param>input</param>
  <attack>&lt;input type="password" name="password" size="20"&gt;</attack>
  <otherinfo/>
  <solution>Turn off AUTOCOMPLETE attribute in form or individual input elements containing password by using AUTOCOMPLETE='OFF'
	</solution>
  <reference>http://msdn.microsoft.com/library/default.asp?url=/workshop/author/forms/autocomplete_ovr.asp
	</reference>
  <cweid>525</cweid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=user-info.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=user-info.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=register.php</uri>
  <param>PHPSESSID=214ac2518ad2aa1df540ebe6ef4c6096; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=214ac2518ad2aa1df540ebe6ef4c6096; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10012</pluginid>
  <alert>Password Autocomplete in browser</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>AUTOCOMPLETE attribute is not disabled in HTML FORM/INPUT element containing password type input.  Passwords may be stored in browsers and retrieved.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=register.php</uri>
  <param>input</param>
  <attack>&lt;input type="password" name="confirm_password" size="20"&gt;</attack>
  <otherinfo/>
  <solution>Turn off AUTOCOMPLETE attribute in form or individual input elements containing password by using AUTOCOMPLETE='OFF'
	</solution>
  <reference>http://msdn.microsoft.com/library/default.asp?url=/workshop/author/forms/autocomplete_ovr.asp
	</reference>
  <cweid>525</cweid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=register.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=register.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>90022</pluginid>
  <alert>Application Error disclosure</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application.The alert could be a false positive if the error message is found inside a documentation page.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=view-someones-blog.php</uri>
  <param>N/A</param>
  <attack>Table 'metasploit.accounts' doesn't exist</attack>
  <otherinfo/>
  <evidence>Table 'metasploit.accounts' doesn't exist</evidence>
  <solution>Review the source code of this page
	</solution>
  <reference>
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=view-someones-blog.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=view-someones-blog.php</uri>
  <param>PHPSESSID=92fd414e1941e042d92652aed0078cc5; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=92fd414e1941e042d92652aed0078cc5; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=view-someones-blog.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>90022</pluginid>
  <alert>Application Error disclosure</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application.The alert could be a false positive if the error message is found inside a documentation page.
	</desc>
  <uri>http://172.16.162.128/mutillidae/?page=add-to-your-blog.php</uri>
  <param>N/A</param>
  <attack>Table 'metasploit.blogs_table' doesn't exist</attack>
  <otherinfo/>
  <evidence>Table 'metasploit.blogs_table' doesn't exist</evidence>
  <solution>Review the source code of this page
	</solution>
  <reference>
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/?page=add-to-your-blog.php</uri>
  <param>PHPSESSID=2a1694e01207f9814b3304c1cce6779c; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=2a1694e01207f9814b3304c1cce6779c; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/?page=add-to-your-blog.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/?page=add-to-your-blog.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=site-footer-xss-discussion.php</uri>
  <param>PHPSESSID=f362478161f3e34d627e321e8b4a6bde; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=f362478161f3e34d627e321e8b4a6bde; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=site-footer-xss-discussion.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=site-footer-xss-discussion.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=html5-storage.php</uri>
  <param>PHPSESSID=89338a28779f6395f2add7b5770cc8ab; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=89338a28779f6395f2add7b5770cc8ab; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=html5-storage.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=html5-storage.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>90022</pluginid>
  <alert>Application Error disclosure</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application.The alert could be a false positive if the error message is found inside a documentation page.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=capture-data.php</uri>
  <param>N/A</param>
  <attack>Table 'metasploit.captured_data' doesn't exist</attack>
  <otherinfo/>
  <evidence>Table 'metasploit.captured_data' doesn't exist</evidence>
  <solution>Review the source code of this page
	</solution>
  <reference>
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=capture-data.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=capture-data.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=capture-data.php</uri>
  <param>PHPSESSID=ba97bc05a0138a1c6e98335673877b44; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=ba97bc05a0138a1c6e98335673877b44; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>2</pluginid>
  <alert>Private IP disclosure</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A private IP such as 10.x.x.x, 172.x.x.x, 192.168.x.x has been found in the HTTP response body.  This information might be helpful for further attacks targeting internal systems.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=capture-data.php</uri>
  <param/>
  <attack>172.16.162.1</attack>
  <otherinfo>172.16.162.1
172.16.162.1
</otherinfo>
  <evidence>172.16.162.1</evidence>
  <solution>Remove the private IP address from the HTTP response body.  For comments, use JSP/ASP comment instead of HTML/JavaScript comment which can be seen by client browsers.
	</solution>
  <otherinfo>172.16.162.1
	172.16.162.1
	
	</otherinfo>
  <reference>
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=dns-lookup.php</uri>
  <param>PHPSESSID=f024c075b0cea4641402f45abdd4ea34; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=f024c075b0cea4641402f45abdd4ea34; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=dns-lookup.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=dns-lookup.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php</uri>
  <param>PHPSESSID=eab623c621251aed81a4d2e9c5d3ef11; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=eab623c621251aed81a4d2e9c5d3ef11; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=password-generator.php&amp;username=anonymous</uri>
  <param>PHPSESSID=cfea622001b74b24ded80205e05ef900; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=cfea622001b74b24ded80205e05ef900; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=password-generator.php&amp;username=anonymous</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=password-generator.php&amp;username=anonymous</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=user-poll.php</uri>
  <param>PHPSESSID=987731e7cd5ebc01913a770ebfe0d721; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=987731e7cd5ebc01913a770ebfe0d721; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=user-poll.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=user-poll.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=set-background-color.php</uri>
  <param>PHPSESSID=579630df41c140b203f1112b7ddb2355; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=579630df41c140b203f1112b7ddb2355; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=set-background-color.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=set-background-color.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>90022</pluginid>
  <alert>Application Error disclosure</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application.The alert could be a false positive if the error message is found inside a documentation page.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=add-to-your-blog.php</uri>
  <param>N/A</param>
  <attack>Table 'metasploit.blogs_table' doesn't exist</attack>
  <otherinfo/>
  <evidence>Table 'metasploit.blogs_table' doesn't exist</evidence>
  <solution>Review the source code of this page
	</solution>
  <reference>
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=add-to-your-blog.php</uri>
  <param>PHPSESSID=996a39ea81b8cb666722c5a30894eed7; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=996a39ea81b8cb666722c5a30894eed7; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=add-to-your-blog.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=add-to-your-blog.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>90022</pluginid>
  <alert>Application Error disclosure</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application.The alert could be a false positive if the error message is found inside a documentation page.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=pen-test-tool-lookup.php</uri>
  <param>N/A</param>
  <attack>&lt;b&gt;Fatal error&lt;/b&gt;:  Call to a member function fetch_object() on a non-object in &lt;b&gt;/var/www/mutillidae/pen-test-tool-lookup.php&lt;/b&gt; on line &lt;b&gt;273&lt;/b&gt;&lt;br /&gt;</attack>
  <otherinfo/>
  <evidence>&lt;b&gt;Fatal error&lt;/b&gt;:  Call to a member function fetch_object() on a non-object in &lt;b&gt;/var/www/mutillidae/pen-test-tool-lookup.php&lt;/b&gt; on line &lt;b&gt;273&lt;/b&gt;&lt;br /&gt;</evidence>
  <solution>Review the source code of this page
	</solution>
  <reference>
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=pen-test-tool-lookup.php</uri>
  <param>PHPSESSID=cf4a3271ae24e5e2ac4b16d6701d12b1; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=cf4a3271ae24e5e2ac4b16d6701d12b1; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=pen-test-tool-lookup.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=pen-test-tool-lookup.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=text-file-viewer.php</uri>
  <param>PHPSESSID=a68259d8faa53ffb7e0d6a8313b90ecc; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=a68259d8faa53ffb7e0d6a8313b90ecc; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=text-file-viewer.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=text-file-viewer.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>90022</pluginid>
  <alert>Application Error disclosure</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application.The alert could be a false positive if the error message is found inside a documentation page.
	</desc>
  <uri>http://172.16.162.128/mutillidae/?page=view-someones-blog.php</uri>
  <param>N/A</param>
  <attack>Table 'metasploit.accounts' doesn't exist</attack>
  <otherinfo/>
  <evidence>Table 'metasploit.accounts' doesn't exist</evidence>
  <solution>Review the source code of this page
	</solution>
  <reference>
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/?page=view-someones-blog.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/?page=view-someones-blog.php</uri>
  <param>PHPSESSID=0e0fbdce195fb46468728fb4fac8834a; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=0e0fbdce195fb46468728fb4fac8834a; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/?page=view-someones-blog.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>90022</pluginid>
  <alert>Application Error disclosure</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application.The alert could be a false positive if the error message is found inside a documentation page.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=browser-info.php</uri>
  <param>N/A</param>
  <attack>&lt;b&gt;Warning&lt;/b&gt;:  fsockopen() [&lt;a href='function.fsockopen'&gt;function.fsockopen&lt;/a&gt;]: php_network_getaddresses: getaddrinfo failed: Name or service not known in &lt;b&gt;/var/www/mutillidae/classes/ClientInformationHandler.php&lt;/b&gt; on line &lt;b&gt;151&lt;/b&gt;&lt;br /&gt;</attack>
  <otherinfo/>
  <evidence>&lt;b&gt;Warning&lt;/b&gt;:  fsockopen() [&lt;a href='function.fsockopen'&gt;function.fsockopen&lt;/a&gt;]: php_network_getaddresses: getaddrinfo failed: Name or service not known in &lt;b&gt;/var/www/mutillidae/classes/ClientInformationHandler.php&lt;/b&gt; on line &lt;b&gt;151&lt;/b&gt;&lt;br /&gt;</evidence>
  <solution>Review the source code of this page
	</solution>
  <reference>
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=browser-info.php</uri>
  <param>PHPSESSID=5b09a88bbaa24ea0fa2078381b580563; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=5b09a88bbaa24ea0fa2078381b580563; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=browser-info.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=browser-info.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>2</pluginid>
  <alert>Private IP disclosure</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A private IP such as 10.x.x.x, 172.x.x.x, 192.168.x.x has been found in the HTTP response body.  This information might be helpful for further attacks targeting internal systems.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=browser-info.php</uri>
  <param/>
  <attack>172.16.162.1</attack>
  <otherinfo>172.16.162.1
172.16.162.1
</otherinfo>
  <evidence>172.16.162.1</evidence>
  <solution>Remove the private IP address from the HTTP response body.  For comments, use JSP/ASP comment instead of HTML/JavaScript comment which can be seen by client browsers.
	</solution>
  <otherinfo>172.16.162.1
	172.16.162.1
	
	</otherinfo>
  <reference>
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>90022</pluginid>
  <alert>Application Error disclosure</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application.The alert could be a false positive if the error message is found inside a documentation page.
	</desc>
  <uri>http://172.16.162.128/mutillidae/?page=show-log.php</uri>
  <param>N/A</param>
  <attack>Table 'metasploit.hitlog' doesn't exist</attack>
  <otherinfo/>
  <evidence>Table 'metasploit.hitlog' doesn't exist</evidence>
  <solution>Review the source code of this page
	</solution>
  <reference>
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/?page=show-log.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/?page=show-log.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/?page=show-log.php</uri>
  <param>PHPSESSID=0ae96af7c90479ea48033597260f7916; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=0ae96af7c90479ea48033597260f7916; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=source-viewer.php</uri>
  <param>PHPSESSID=f86175215a7f5ef195a17e50a50b92bd; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=f86175215a7f5ef195a17e50a50b92bd; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=source-viewer.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=source-viewer.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/?page=text-file-viewer.php</uri>
  <param>PHPSESSID=980220a8a3409b2db4ab19c91092af93; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=980220a8a3409b2db4ab19c91092af93; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/?page=text-file-viewer.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/?page=text-file-viewer.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=arbitrary-file-inclusion.php</uri>
  <param>PHPSESSID=6cca0d81a51ee7c7d9864aa9ccfd8b62; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=6cca0d81a51ee7c7d9864aa9ccfd8b62; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=arbitrary-file-inclusion.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=arbitrary-file-inclusion.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/?page=user-info.php</uri>
  <param>PHPSESSID=c262baf999424e9aafb01d2652177cad; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=c262baf999424e9aafb01d2652177cad; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10012</pluginid>
  <alert>Password Autocomplete in browser</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>AUTOCOMPLETE attribute is not disabled in HTML FORM/INPUT element containing password type input.  Passwords may be stored in browsers and retrieved.
	</desc>
  <uri>http://172.16.162.128/mutillidae/?page=user-info.php</uri>
  <param>input</param>
  <attack>&lt;input type="password" name="password" size="20"&gt;</attack>
  <otherinfo/>
  <solution>Turn off AUTOCOMPLETE attribute in form or individual input elements containing password by using AUTOCOMPLETE='OFF'
	</solution>
  <reference>http://msdn.microsoft.com/library/default.asp?url=/workshop/author/forms/autocomplete_ovr.asp
	</reference>
  <cweid>525</cweid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/?page=user-info.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/?page=user-info.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=secret-administrative-pages.php</uri>
  <param>PHPSESSID=0859d88c1ee115ee333b83e56f8081c8; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=0859d88c1ee115ee333b83e56f8081c8; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=secret-administrative-pages.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=secret-administrative-pages.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/?page=login.php</uri>
  <param>PHPSESSID=d59ca7964ed71d9449f60d95baaca69b; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=d59ca7964ed71d9449f60d95baaca69b; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10012</pluginid>
  <alert>Password Autocomplete in browser</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>AUTOCOMPLETE attribute is not disabled in HTML FORM/INPUT element containing password type input.  Passwords may be stored in browsers and retrieved.
	</desc>
  <uri>http://172.16.162.128/mutillidae/?page=login.php</uri>
  <param>input</param>
  <attack>&lt;input type="password" name="password" maxlength="20" size="20"&gt;</attack>
  <otherinfo/>
  <solution>Turn off AUTOCOMPLETE attribute in form or individual input elements containing password by using AUTOCOMPLETE='OFF'
	</solution>
  <reference>http://msdn.microsoft.com/library/default.asp?url=/workshop/author/forms/autocomplete_ovr.asp
	</reference>
  <cweid>525</cweid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/?page=login.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/?page=login.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/?page=credits.php</uri>
  <param>PHPSESSID=6ba67f157c50145d1984bb230205e3b0; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=6ba67f157c50145d1984bb230205e3b0; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/?page=credits.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/?page=credits.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=framing.php</uri>
  <param>PHPSESSID=425060285f7725156b690f3f9fdf9e13; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=425060285f7725156b690f3f9fdf9e13; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=framing.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=framing.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/?page=source-viewer.php</uri>
  <param>PHPSESSID=65da7faf8765a2c7403cf6182b4410e6; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=65da7faf8765a2c7403cf6182b4410e6; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/?page=source-viewer.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/?page=source-viewer.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/framer.html</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/framer.html</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=installation.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=installation.php</uri>
  <param>PHPSESSID=e436ea8aef3e28716de12142c13413fe; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=e436ea8aef3e28716de12142c13413fe; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=installation.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=change-log.htm</uri>
  <param>PHPSESSID=024d08f77729f9f208f80cd493b783da; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=024d08f77729f9f208f80cd493b783da; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=change-log.htm</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=change-log.htm</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/documentation/mutillidae-installation-on-xampp-win7.pdf</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=documentation/vulnerabilities.php</uri>
  <param>PHPSESSID=ecffc2043b06434024418d159b2c6867; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=ecffc2043b06434024418d159b2c6867; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=documentation/vulnerabilities.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=documentation/vulnerabilities.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=documentation/how-to-access-Mutillidae-over-Virtual-Box-network.php</uri>
  <param>PHPSESSID=5db688ce3beb7fe7c4fe847d653ec5bb; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=5db688ce3beb7fe7c4fe847d653ec5bb; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>2</pluginid>
  <alert>Private IP disclosure</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A private IP such as 10.x.x.x, 172.x.x.x, 192.168.x.x has been found in the HTTP response body.  This information might be helpful for further attacks targeting internal systems.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=documentation/how-to-access-Mutillidae-over-Virtual-Box-network.php</uri>
  <param/>
  <attack>192.168.56.0</attack>
  <otherinfo>192.168.56.0
192.168.56.0
192.168.0.0
</otherinfo>
  <evidence>192.168.56.0</evidence>
  <solution>Remove the private IP address from the HTTP response body.  For comments, use JSP/ASP comment instead of HTML/JavaScript comment which can be seen by client browsers.
	</solution>
  <otherinfo>192.168.56.0
	192.168.56.0
	192.168.0.0
	
	</otherinfo>
  <reference>
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=documentation/how-to-access-Mutillidae-over-Virtual-Box-network.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=documentation/how-to-access-Mutillidae-over-Virtual-Box-network.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=usage-instructions.php</uri>
  <param>PHPSESSID=22d8ab45b110f9ae22d499caeaf00732; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=22d8ab45b110f9ae22d499caeaf00732; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=usage-instructions.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=usage-instructions.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=php-errors.php</uri>
  <param>PHPSESSID=4c436e6555da6a50e3b0dfc45df7c445; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=4c436e6555da6a50e3b0dfc45df7c445; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=php-errors.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=php-errors.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=notes.php</uri>
  <param>PHPSESSID=f051d8027551e05d7e14bfbb4995e3d1; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=f051d8027551e05d7e14bfbb4995e3d1; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=notes.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=notes.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/favicon.ico</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/styles/global-styles.css</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/styles/global-styles.css</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/styles/ddsmoothmenu/ddsmoothmenu-v.css</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/styles/ddsmoothmenu/ddsmoothmenu-v.css</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/styles/ddsmoothmenu/ddsmoothmenu.css</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/styles/ddsmoothmenu/ddsmoothmenu.css</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/javascript/bookmark-site.js</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/javascript/bookmark-site.js</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/javascript/ddsmoothmenu/ddsmoothmenu.js</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/javascript/ddsmoothmenu/ddsmoothmenu.js</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/javascript/ddsmoothmenu/jquery.min.js</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/javascript/ddsmoothmenu/jquery.min.js</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/images/coykillericon.png</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/images/owasp-logo-400-300.png</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/images/twitter.gif</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/images/youtube_256_256.png</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/images/backtrack-4-r2-logo-90-69.png</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/images/samurai-wtf-logo-320-214.jpeg</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/images/php-mysql-logo-176-200.jpeg</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/images/bui_eclipse_pos_logo_fc_med.jpg</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/images/toad-for-mysql-77-80.jpg</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/images/IhackBanner2x_final_print.jpg</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=login.php</uri>
  <param>PHPSESSID=1878f3a0fdde12e88d0216bfcaa0e5d0; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=1878f3a0fdde12e88d0216bfcaa0e5d0; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=login.php</uri>
  <param>showhints=1</param>
  <attack/>
  <otherinfo/>
  <evidence>showhints=1</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/images/back-button-128px-by-128px.png</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-security&amp;page=login.php</uri>
  <param>PHPSESSID=00f2a876d6e49595a5a5bdd0f8068b03; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=00f2a876d6e49595a5a5bdd0f8068b03; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=show-log.php</uri>
  <param>PHPSESSID=4755da9190d03eaa1515fbf7384199cf; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=4755da9190d03eaa1515fbf7384199cf; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=show-log.php</uri>
  <param>showhints=1</param>
  <attack/>
  <otherinfo/>
  <evidence>showhints=1</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>90022</pluginid>
  <alert>Application Error disclosure</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application.The alert could be a false positive if the error message is found inside a documentation page.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=login.php</uri>
  <param>N/A</param>
  <attack>&lt;b&gt;Warning&lt;/b&gt;:  Cannot modify header information - headers already sent by (output started at /var/www/mutillidae/process-login-attempt.php:97) in &lt;b&gt;/var/www/mutillidae/index.php&lt;/b&gt; on line &lt;b&gt;148&lt;/b&gt;&lt;br /&gt;</attack>
  <otherinfo/>
  <evidence>&lt;b&gt;Warning&lt;/b&gt;:  Cannot modify header information - headers already sent by (output started at /var/www/mutillidae/process-login-attempt.php:97) in &lt;b&gt;/var/www/mutillidae/index.php&lt;/b&gt; on line &lt;b&gt;148&lt;/b&gt;&lt;br /&gt;</evidence>
  <solution>Review the source code of this page
	</solution>
  <reference>
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=login.php</uri>
  <param>PHPSESSID=983d93c2d10079a5e2480b6312d7f128; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=983d93c2d10079a5e2480b6312d7f128; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-security&amp;page=show-log.php</uri>
  <param>PHPSESSID=ecb8f064cd14acbad25915e39b51d932; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=ecb8f064cd14acbad25915e39b51d932; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=credits.php</uri>
  <param>PHPSESSID=d40309cfb98b3fd08c253876107a73e7; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=d40309cfb98b3fd08c253876107a73e7; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=credits.php</uri>
  <param>showhints=1</param>
  <attack/>
  <otherinfo/>
  <evidence>showhints=1</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-security&amp;page=credits.php</uri>
  <param>PHPSESSID=73972a97330d25d91f9da7001df0704c; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=73972a97330d25d91f9da7001df0704c; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=captured-data.php</uri>
  <param>PHPSESSID=2a57c1a132ed0de927c5d2e808fdf2c6; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=2a57c1a132ed0de927c5d2e808fdf2c6; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=captured-data.php</uri>
  <param>showhints=1</param>
  <attack/>
  <otherinfo/>
  <evidence>showhints=1</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-security&amp;page=captured-data.php</uri>
  <param>PHPSESSID=c2560db325465e19fd19dab299330e6f; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=c2560db325465e19fd19dab299330e6f; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?forwardurl=http://www.irongeek.com/&amp;page=redirectandlog.php</uri>
  <param>PHPSESSID=cfcea3ffc667133a700a08bf6c3fc1de; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=cfcea3ffc667133a700a08bf6c3fc1de; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?forwardurl=http://www.irongeek.com/&amp;page=redirectandlog.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?forwardurl=http://www.irongeek.com/&amp;page=redirectandlog.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/images/refresh-button-48px-by-48px.png</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?forwardurl=http://www.owasp.org&amp;page=redirectandlog.php</uri>
  <param>PHPSESSID=f486edaa3fb2b3728d1c6666950db7f5; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=f486edaa3fb2b3728d1c6666950db7f5; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?forwardurl=http://www.owasp.org&amp;page=redirectandlog.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?forwardurl=http://www.owasp.org&amp;page=redirectandlog.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/images/delete-icon-256-256.png</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?forwardurl=http://www.issa-kentuckiana.org/&amp;page=redirectandlog.php</uri>
  <param>PHPSESSID=9341932cb5e0384c035f42279e53ce45; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=9341932cb5e0384c035f42279e53ce45; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?forwardurl=http://www.issa-kentuckiana.org/&amp;page=redirectandlog.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?forwardurl=http://www.issa-kentuckiana.org/&amp;page=redirectandlog.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?forwardurl=http://www.owasp.org/index.php/Louisville&amp;page=redirectandlog.php</uri>
  <param>PHPSESSID=be78c9962aeb2e35224dc576b81e7612; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=be78c9962aeb2e35224dc576b81e7612; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?forwardurl=http://www.owasp.org/index.php/Louisville&amp;page=redirectandlog.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?forwardurl=http://www.owasp.org/index.php/Louisville&amp;page=redirectandlog.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?forwardurl=http://www.pocodoy.com/blog/&amp;page=redirectandlog.php</uri>
  <param>PHPSESSID=618f7068354c91369818069fb38c3006; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=618f7068354c91369818069fb38c3006; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?forwardurl=http://www.pocodoy.com/blog/&amp;page=redirectandlog.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?forwardurl=http://www.pocodoy.com/blog/&amp;page=redirectandlog.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?forwardurl=http://www.room362.com/&amp;page=redirectandlog.php</uri>
  <param>PHPSESSID=0d5cfc0268c3261f88f9d5d78cd5d057; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=0d5cfc0268c3261f88f9d5d78cd5d057; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?forwardurl=http://www.room362.com/&amp;page=redirectandlog.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?forwardurl=http://www.room362.com/&amp;page=redirectandlog.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?forwardurl=http://www.isd-podcast.com/&amp;page=redirectandlog.php</uri>
  <param>PHPSESSID=9d074067939a82a0e4b2edf96e021419; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=9d074067939a82a0e4b2edf96e021419; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?forwardurl=http://www.isd-podcast.com/&amp;page=redirectandlog.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?forwardurl=http://www.isd-podcast.com/&amp;page=redirectandlog.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?forwardurl=http://pauldotcom.com/&amp;page=redirectandlog.php</uri>
  <param>PHPSESSID=6025ed8b960e24762cb947640ba3d59b; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=6025ed8b960e24762cb947640ba3d59b; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?forwardurl=http://pauldotcom.com/&amp;page=redirectandlog.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?forwardurl=http://pauldotcom.com/&amp;page=redirectandlog.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?forwardurl=http://www.php.net/&amp;page=redirectandlog.php</uri>
  <param>PHPSESSID=749b148a09d19d37e55c1bc834d69341; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=749b148a09d19d37e55c1bc834d69341; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?forwardurl=http://www.php.net/&amp;page=redirectandlog.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?forwardurl=http://www.php.net/&amp;page=redirectandlog.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?forwardurl=https://addons.mozilla.org/en-US/firefox/collections/jdruin/pr/&amp;page=redirectandlog.php</uri>
  <param>PHPSESSID=10e9c1abeb6f1d8f9f65d916155959fd; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=10e9c1abeb6f1d8f9f65d916155959fd; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?forwardurl=https://addons.mozilla.org/en-US/firefox/collections/jdruin/pr/&amp;page=redirectandlog.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?forwardurl=https://addons.mozilla.org/en-US/firefox/collections/jdruin/pr/&amp;page=redirectandlog.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=user-info.php</uri>
  <param>PHPSESSID=2771d905786d49fc41fcea52acd43263; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=2771d905786d49fc41fcea52acd43263; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=user-info.php</uri>
  <param>showhints=1</param>
  <attack/>
  <otherinfo/>
  <evidence>showhints=1</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-security&amp;page=user-info.php</uri>
  <param>PHPSESSID=ecda8bd424c9651c5e92d6aeb9425a2c; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=ecda8bd424c9651c5e92d6aeb9425a2c; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>90022</pluginid>
  <alert>Application Error disclosure</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application.The alert could be a false positive if the error message is found inside a documentation page.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=user-info.php&amp;password=ZAP&amp;user-info-php-submit-button=View+Account+Details&amp;username=ZAP</uri>
  <param>N/A</param>
  <attack>Table 'metasploit.accounts' doesn't exist</attack>
  <otherinfo/>
  <evidence>Table 'metasploit.accounts' doesn't exist</evidence>
  <solution>Review the source code of this page
	</solution>
  <reference>
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10012</pluginid>
  <alert>Password Autocomplete in browser</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>AUTOCOMPLETE attribute is not disabled in HTML FORM/INPUT element containing password type input.  Passwords may be stored in browsers and retrieved.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=user-info.php&amp;password=ZAP&amp;user-info-php-submit-button=View+Account+Details&amp;username=ZAP</uri>
  <param>input</param>
  <attack>&lt;input type="password" name="password" size="20"&gt;</attack>
  <otherinfo/>
  <solution>Turn off AUTOCOMPLETE attribute in form or individual input elements containing password by using AUTOCOMPLETE='OFF'
	</solution>
  <reference>http://msdn.microsoft.com/library/default.asp?url=/workshop/author/forms/autocomplete_ovr.asp
	</reference>
  <cweid>525</cweid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=user-info.php&amp;password=ZAP&amp;user-info-php-submit-button=View+Account+Details&amp;username=ZAP</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=user-info.php&amp;password=ZAP&amp;user-info-php-submit-button=View+Account+Details&amp;username=ZAP</uri>
  <param>PHPSESSID=5cfb0f19e9b29f7d89bb3c9b1e726c2e; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=5cfb0f19e9b29f7d89bb3c9b1e726c2e; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=user-info.php&amp;password=ZAP&amp;user-info-php-submit-button=View+Account+Details&amp;username=ZAP</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=register.php</uri>
  <param>PHPSESSID=3aa8a72329ad9a25f664dd0b877b5095; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=3aa8a72329ad9a25f664dd0b877b5095; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=register.php</uri>
  <param>showhints=1</param>
  <attack/>
  <otherinfo/>
  <evidence>showhints=1</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-security&amp;page=register.php</uri>
  <param>PHPSESSID=3e0987a45295cddc47df418732ffe657; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=3e0987a45295cddc47df418732ffe657; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>90022</pluginid>
  <alert>Application Error disclosure</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application.The alert could be a false positive if the error message is found inside a documentation page.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=register.php</uri>
  <param>N/A</param>
  <attack>Table 'metasploit.accounts' doesn't exist</attack>
  <otherinfo/>
  <evidence>Table 'metasploit.accounts' doesn't exist</evidence>
  <solution>Review the source code of this page
	</solution>
  <reference>
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=register.php</uri>
  <param>PHPSESSID=5a0c12d8b7c3bf59a41447c1f6cf731e; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=5a0c12d8b7c3bf59a41447c1f6cf731e; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=view-someones-blog.php</uri>
  <param>PHPSESSID=d5b9a49ef789d0aab44826c7f894e64d; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=d5b9a49ef789d0aab44826c7f894e64d; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=view-someones-blog.php</uri>
  <param>showhints=1</param>
  <attack/>
  <otherinfo/>
  <evidence>showhints=1</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-security&amp;page=view-someones-blog.php</uri>
  <param>PHPSESSID=0db9b2f22bb24f1bbd6fe858744d94b0; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=0db9b2f22bb24f1bbd6fe858744d94b0; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/images/add_icon.png</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=view-someones-blog.php</uri>
  <param>PHPSESSID=3f308636c3add8f2dbe7f6b61bf7116e; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=3f308636c3add8f2dbe7f6b61bf7116e; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=add-to-your-blog.php</uri>
  <param>PHPSESSID=51bf57c5fb8d50ea5fcfc680899104e0; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=51bf57c5fb8d50ea5fcfc680899104e0; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=add-to-your-blog.php</uri>
  <param>showhints=1</param>
  <attack/>
  <otherinfo/>
  <evidence>showhints=1</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/images/magnifying-glass-icon.jpeg</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-security&amp;page=add-to-your-blog.php</uri>
  <param>PHPSESSID=9ced3a0df610101108f9ce995781316f; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=9ced3a0df610101108f9ce995781316f; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=site-footer-xss-discussion.php</uri>
  <param>PHPSESSID=9e53cf4314b57a588d9fba1b61bc3174; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=9e53cf4314b57a588d9fba1b61bc3174; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=site-footer-xss-discussion.php</uri>
  <param>showhints=1</param>
  <attack/>
  <otherinfo/>
  <evidence>showhints=1</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=add-to-your-blog.php</uri>
  <param>PHPSESSID=c2586f695ea244bfa862b93724c477cf; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=c2586f695ea244bfa862b93724c477cf; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-security&amp;page=site-footer-xss-discussion.php</uri>
  <param>PHPSESSID=f06304e4a35be9ef9bdf2ff0ebae048c; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=f06304e4a35be9ef9bdf2ff0ebae048c; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=html5-storage.php</uri>
  <param>PHPSESSID=44711a2958e6a562cc40c79407a61faf; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=44711a2958e6a562cc40c79407a61faf; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=html5-storage.php</uri>
  <param>showhints=1</param>
  <attack/>
  <otherinfo/>
  <evidence>showhints=1</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/javascript/html5-secrets.js</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/javascript/html5-secrets.js</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-security&amp;page=html5-storage.php</uri>
  <param>PHPSESSID=2afd29daf044b6c8761cfcd1ecd349dc; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=2afd29daf044b6c8761cfcd1ecd349dc; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=html5-storage.php</uri>
  <param>PHPSESSID=66772caec6ebe111e7918fedb2061b89; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=66772caec6ebe111e7918fedb2061b89; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=capture-data.php</uri>
  <param>PHPSESSID=fc699e8c4bc20e87836550462815775c; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=fc699e8c4bc20e87836550462815775c; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=capture-data.php</uri>
  <param>showhints=1</param>
  <attack/>
  <otherinfo/>
  <evidence>showhints=1</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-security&amp;page=capture-data.php</uri>
  <param>PHPSESSID=401ff421f1b13e0d18365a4907e46bf6; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=401ff421f1b13e0d18365a4907e46bf6; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=dns-lookup.php</uri>
  <param>PHPSESSID=590d7c27040fe69f7bcea8085036dd59; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=590d7c27040fe69f7bcea8085036dd59; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=dns-lookup.php</uri>
  <param>showhints=1</param>
  <attack/>
  <otherinfo/>
  <evidence>showhints=1</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-security&amp;page=dns-lookup.php</uri>
  <param>PHPSESSID=a44b44c6cf3a968567768f7ec222f44e; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=a44b44c6cf3a968567768f7ec222f44e; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=password-generator.php</uri>
  <param>PHPSESSID=48a2773c29579267dd55332be5a00666; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=48a2773c29579267dd55332be5a00666; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=password-generator.php</uri>
  <param>showhints=1</param>
  <attack/>
  <otherinfo/>
  <evidence>showhints=1</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-security&amp;page=password-generator.php</uri>
  <param>PHPSESSID=41ef4d5303e2ef70648abb506e4bd114; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=41ef4d5303e2ef70648abb506e4bd114; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=user-poll.php</uri>
  <param>PHPSESSID=95a01de501dfeab4bbed28da3505a16d; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=95a01de501dfeab4bbed28da3505a16d; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=user-poll.php</uri>
  <param>showhints=1</param>
  <attack/>
  <otherinfo/>
  <evidence>showhints=1</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=set-background-color.php</uri>
  <param>PHPSESSID=336981b927192eedbdf32fb75076d27e; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=336981b927192eedbdf32fb75076d27e; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=set-background-color.php</uri>
  <param>showhints=1</param>
  <attack/>
  <otherinfo/>
  <evidence>showhints=1</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-security&amp;page=set-background-color.php</uri>
  <param>PHPSESSID=d1df8436e921062907452dbfc4645d9d; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=d1df8436e921062907452dbfc4645d9d; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-security&amp;page=user-poll.php</uri>
  <param>PHPSESSID=2319e2a07171aae10c909da754c71c15; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=2319e2a07171aae10c909da754c71c15; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=set-background-color.php</uri>
  <param>PHPSESSID=8daf7ab83913fe1b9cb7bc6290367707; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=8daf7ab83913fe1b9cb7bc6290367707; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?choice=nmap&amp;initials=ZAP&amp;page=user-poll.php&amp;user-poll-php-submit-button=Submit+Vote</uri>
  <param>PHPSESSID=ed8d23c9268c261773cec8c4445cf008; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=ed8d23c9268c261773cec8c4445cf008; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?choice=nmap&amp;initials=ZAP&amp;page=user-poll.php&amp;user-poll-php-submit-button=Submit+Vote</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?choice=nmap&amp;initials=ZAP&amp;page=user-poll.php&amp;user-poll-php-submit-button=Submit+Vote</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=pen-test-tool-lookup.php</uri>
  <param>PHPSESSID=00c212f4a41443048074b645394674fc; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=00c212f4a41443048074b645394674fc; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=pen-test-tool-lookup.php</uri>
  <param>showhints=1</param>
  <attack/>
  <otherinfo/>
  <evidence>showhints=1</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-security&amp;page=pen-test-tool-lookup.php</uri>
  <param>PHPSESSID=e0a1b166db33f754fb9962b6537b6904; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=e0a1b166db33f754fb9962b6537b6904; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=pen-test-tool-lookup.php</uri>
  <param>PHPSESSID=713d46792083038f46474f57632644bb; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=713d46792083038f46474f57632644bb; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=text-file-viewer.php</uri>
  <param>PHPSESSID=f4b2be6274061f9e32a70c270079b3d0; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=f4b2be6274061f9e32a70c270079b3d0; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=text-file-viewer.php</uri>
  <param>showhints=1</param>
  <attack/>
  <otherinfo/>
  <evidence>showhints=1</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-security&amp;page=text-file-viewer.php</uri>
  <param>PHPSESSID=a5da48fa4051ae6126bb92a111fa54d0; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=a5da48fa4051ae6126bb92a111fa54d0; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>90022</pluginid>
  <alert>Application Error disclosure</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application.The alert could be a false positive if the error message is found inside a documentation page.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=text-file-viewer.php</uri>
  <param>N/A</param>
  <attack>&lt;b&gt;Warning&lt;/b&gt;:  fopen() [&lt;a href='function.fopen'&gt;function.fopen&lt;/a&gt;]: php_network_getaddresses: getaddrinfo failed: Name or service not known in &lt;b&gt;/var/www/mutillidae/text-file-viewer.php&lt;/b&gt; on line &lt;b&gt;115&lt;/b&gt;&lt;br /&gt;</attack>
  <otherinfo/>
  <evidence>&lt;b&gt;Warning&lt;/b&gt;:  fopen() [&lt;a href='function.fopen'&gt;function.fopen&lt;/a&gt;]: php_network_getaddresses: getaddrinfo failed: Name or service not known in &lt;b&gt;/var/www/mutillidae/text-file-viewer.php&lt;/b&gt; on line &lt;b&gt;115&lt;/b&gt;&lt;br /&gt;</evidence>
  <solution>Review the source code of this page
	</solution>
  <reference>
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=text-file-viewer.php</uri>
  <param>PHPSESSID=86cb93fab03a47f149c450b6a4b8e695; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=86cb93fab03a47f149c450b6a4b8e695; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=browser-info.php</uri>
  <param>PHPSESSID=1318017bbc9833d77ee6c88259671d78; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=1318017bbc9833d77ee6c88259671d78; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=browser-info.php</uri>
  <param>showhints=1</param>
  <attack/>
  <otherinfo/>
  <evidence>showhints=1</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-security&amp;page=browser-info.php</uri>
  <param>PHPSESSID=0f5bdcd6ab7381426140d87f9df01685; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=0f5bdcd6ab7381426140d87f9df01685; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>2</pluginid>
  <alert>Private IP disclosure</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A private IP such as 10.x.x.x, 172.x.x.x, 192.168.x.x has been found in the HTTP response body.  This information might be helpful for further attacks targeting internal systems.
	</desc>
  <uri>http://172.16.162.128/mutillidae/function.fsockopen</uri>
  <param/>
  <attack>172.16.162.128</attack>
  <otherinfo>172.16.162.128
</otherinfo>
  <evidence>172.16.162.128</evidence>
  <solution>Remove the private IP address from the HTTP response body.  For comments, use JSP/ASP comment instead of HTML/JavaScript comment which can be seen by client browsers.
	</solution>
  <otherinfo>172.16.162.128
	
	</otherinfo>
  <reference>
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/function.fsockopen</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/function.fsockopen</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=source-viewer.php</uri>
  <param>PHPSESSID=2ef928e004e5947025b2e5c66b30cf08; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=2ef928e004e5947025b2e5c66b30cf08; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=source-viewer.php</uri>
  <param>showhints=1</param>
  <attack/>
  <otherinfo/>
  <evidence>showhints=1</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-security&amp;page=source-viewer.php</uri>
  <param>PHPSESSID=c7b6a451f067ece8e5023a867e6d2ac1; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=c7b6a451f067ece8e5023a867e6d2ac1; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=source-viewer.php</uri>
  <param>PHPSESSID=ec263ed464e423bf1dc5e3e3d6315404; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=ec263ed464e423bf1dc5e3e3d6315404; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=arbitrary-file-inclusion.php</uri>
  <param>PHPSESSID=07dfc8e996c353e81198d2af02b1b92b; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=07dfc8e996c353e81198d2af02b1b92b; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=arbitrary-file-inclusion.php</uri>
  <param>showhints=1</param>
  <attack/>
  <otherinfo/>
  <evidence>showhints=1</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-security&amp;page=arbitrary-file-inclusion.php</uri>
  <param>PHPSESSID=b91fb23f7ba24bb38ce4eb0417b074eb; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=b91fb23f7ba24bb38ce4eb0417b074eb; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/?page=register.php</uri>
  <param>PHPSESSID=e32d3e83e73d63ed09f9bf2ddef8d074; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=e32d3e83e73d63ed09f9bf2ddef8d074; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/?page=register.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10012</pluginid>
  <alert>Password Autocomplete in browser</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>AUTOCOMPLETE attribute is not disabled in HTML FORM/INPUT element containing password type input.  Passwords may be stored in browsers and retrieved.
	</desc>
  <uri>http://172.16.162.128/mutillidae/?page=register.php</uri>
  <param>input</param>
  <attack>&lt;input type="password" name="password" size="20"&gt;</attack>
  <otherinfo/>
  <solution>Turn off AUTOCOMPLETE attribute in form or individual input elements containing password by using AUTOCOMPLETE='OFF'
	</solution>
  <reference>http://msdn.microsoft.com/library/default.asp?url=/workshop/author/forms/autocomplete_ovr.asp
	</reference>
  <cweid>525</cweid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/?page=register.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=secret-administrative-pages.php</uri>
  <param>PHPSESSID=01e44721cf1e9bba8472126ca0ed75db; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=01e44721cf1e9bba8472126ca0ed75db; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=secret-administrative-pages.php</uri>
  <param>showhints=1</param>
  <attack/>
  <otherinfo/>
  <evidence>showhints=1</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-security&amp;page=secret-administrative-pages.php</uri>
  <param>PHPSESSID=df4b8103425f49a6f9ee6565e1c34e1e; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=df4b8103425f49a6f9ee6565e1c34e1e; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=framing.php</uri>
  <param>PHPSESSID=7eabad0c9326a37241344fc7542c2e07; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=7eabad0c9326a37241344fc7542c2e07; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=framing.php</uri>
  <param>showhints=1</param>
  <attack/>
  <otherinfo/>
  <evidence>showhints=1</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-security&amp;page=framing.php</uri>
  <param>PHPSESSID=f9298b0324ca27ea596b260b4791fe58; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=f9298b0324ca27ea596b260b4791fe58; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=rene-magritte.php</uri>
  <param>PHPSESSID=dd5d701dea3747e77a211061e7f6b72d; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=dd5d701dea3747e77a211061e7f6b72d; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=rene-magritte.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=rene-magritte.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/javascript/follow-mouse.js</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/javascript/follow-mouse.js</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=installation.php</uri>
  <param>PHPSESSID=5a080ba7907ae8cfa72f5bd411d38ce6; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=5a080ba7907ae8cfa72f5bd411d38ce6; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=installation.php</uri>
  <param>showhints=1</param>
  <attack/>
  <otherinfo/>
  <evidence>showhints=1</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=change-log.htm</uri>
  <param>PHPSESSID=b5ef0e7b0589a0aaf8b03cdd110b0346; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=b5ef0e7b0589a0aaf8b03cdd110b0346; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=change-log.htm</uri>
  <param>showhints=1</param>
  <attack/>
  <otherinfo/>
  <evidence>showhints=1</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-security&amp;page=installation.php</uri>
  <param>PHPSESSID=0a0ccafe2899f04e318b571788b428cf; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=0a0ccafe2899f04e318b571788b428cf; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-security&amp;page=change-log.htm</uri>
  <param>PHPSESSID=3a3465aacef2bd40d3575c57f8913126; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=3a3465aacef2bd40d3575c57f8913126; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=documentation/vulnerabilities.php</uri>
  <param>PHPSESSID=dfa55ff6a6788261213ecc26ed3ad1d4; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=dfa55ff6a6788261213ecc26ed3ad1d4; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=documentation/vulnerabilities.php</uri>
  <param>showhints=1</param>
  <attack/>
  <otherinfo/>
  <evidence>showhints=1</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-security&amp;page=documentation/vulnerabilities.php</uri>
  <param>PHPSESSID=fc413e53861e0882e7430bd5efe18184; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=fc413e53861e0882e7430bd5efe18184; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=documentation/how-to-access-Mutillidae-over-Virtual-Box-network.php</uri>
  <param>PHPSESSID=036fd66759c990b5dc7b8e0bfb3f4776; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=036fd66759c990b5dc7b8e0bfb3f4776; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=documentation/how-to-access-Mutillidae-over-Virtual-Box-network.php</uri>
  <param>showhints=1</param>
  <attack/>
  <otherinfo/>
  <evidence>showhints=1</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-security&amp;page=documentation/how-to-access-Mutillidae-over-Virtual-Box-network.php</uri>
  <param>PHPSESSID=656ee0ab9747a6ecf91afb818cc842e5; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=656ee0ab9747a6ecf91afb818cc842e5; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=usage-instructions.php</uri>
  <param>PHPSESSID=07084a5cd044f80e58b91484ea88f3ca; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=07084a5cd044f80e58b91484ea88f3ca; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=usage-instructions.php</uri>
  <param>showhints=1</param>
  <attack/>
  <otherinfo/>
  <evidence>showhints=1</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-security&amp;page=usage-instructions.php</uri>
  <param>PHPSESSID=cc99b820b583d754a5940a12a53270cf; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=cc99b820b583d754a5940a12a53270cf; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=php-errors.php</uri>
  <param>PHPSESSID=f3d2cd76d21909a8d12ded1438884cb3; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=f3d2cd76d21909a8d12ded1438884cb3; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=php-errors.php</uri>
  <param>showhints=1</param>
  <attack/>
  <otherinfo/>
  <evidence>showhints=1</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-security&amp;page=php-errors.php</uri>
  <param>PHPSESSID=01ca928d3ff60fe6ff80bb51fe3e441a; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=01ca928d3ff60fe6ff80bb51fe3e441a; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=notes.php</uri>
  <param>PHPSESSID=0878f348023711fab119114018354bae; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=0878f348023711fab119114018354bae; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=notes.php</uri>
  <param>showhints=1</param>
  <attack/>
  <otherinfo/>
  <evidence>showhints=1</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-security&amp;page=notes.php</uri>
  <param>PHPSESSID=d62f9e4f586972b4ff890609de78a6b1; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=d62f9e4f586972b4ff890609de78a6b1; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=redirectandlog.php</uri>
  <param>PHPSESSID=29346bfbdcfc55e274836d622805f606; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=29346bfbdcfc55e274836d622805f606; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-hints&amp;page=redirectandlog.php</uri>
  <param>showhints=1</param>
  <attack/>
  <otherinfo/>
  <evidence>showhints=1</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?do=toggle-security&amp;page=redirectandlog.php</uri>
  <param>PHPSESSID=50e88bd1fbd3773c9851637443f8c63f; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=50e88bd1fbd3773c9851637443f8c63f; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=password-generator.php</uri>
  <param>PHPSESSID=85f9603fcdf1fbc719823d07affd1003; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=85f9603fcdf1fbc719823d07affd1003; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=password-generator.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=password-generator.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>2</pluginid>
  <alert>Private IP disclosure</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A private IP such as 10.x.x.x, 172.x.x.x, 192.168.x.x has been found in the HTTP response body.  This information might be helpful for further attacks targeting internal systems.
	</desc>
  <uri>http://172.16.162.128/mutillidae/function.fopen</uri>
  <param/>
  <attack>172.16.162.128</attack>
  <otherinfo>172.16.162.128
</otherinfo>
  <evidence>172.16.162.128</evidence>
  <solution>Remove the private IP address from the HTTP response body.  For comments, use JSP/ASP comment instead of HTML/JavaScript comment which can be seen by client browsers.
	</solution>
  <otherinfo>172.16.162.128
	
	</otherinfo>
  <reference>
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/function.fopen</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/function.fopen</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/images/rene-magritte-frame.jpg</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=redirectandlog.php</uri>
  <param>PHPSESSID=6357a2c8cf6a4e9ba6204bcd6b8830e3; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=6357a2c8cf6a4e9ba6204bcd6b8830e3; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>X-Content-Type-Options header missing</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
	This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
	Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=redirectandlog.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
	If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
	</solution>
  <reference>
	</reference>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>X-Frame-Options header not set</alert>
  <riskcode>0</riskcode>
  <reliability>2</reliability>
  <riskdesc>Informational (Warning)</riskdesc>
  <desc>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=redirectandlog.php</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx?Redirected=true
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <reliability>2</reliability>
  <riskdesc>Low (Warning)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=dns-lookup.php</uri>
  <param>PHPSESSID=836f0dc8f1906b39c078645aaae3e729; path=/</param>
  <attack/>
  <otherinfo/>
  <evidence>PHPSESSID=836f0dc8f1906b39c078645aaae3e729; path=/</evidence>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>6</pluginid>
  <alert>Path Traversal</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web document root directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal.
	
	Most web sites restrict user access to a specific portion of the file-system, typically called the "web document root" or "CGI root" directory. These directories contain the files intended for user access and the executable necessary to drive web application functionality. To access files or execute commands anywhere on the file-system, Path Traversal attacks will utilize the ability of special-characters sequences.
	
	The most basic Path Traversal attack uses the "../" special-character sequence to alter the resource location requested in the URL. Although most popular web servers will prevent this technique from escaping the web document root, alternate encodings of the "../" sequence may help bypass the security filters. These method variations include valid and invalid Unicode-encoding ("..%u2216" or "..%c0%af") of the forward slash character, backslash characters ("..\") on Windows-based servers, URL encoded characters "%2e%2e%2f"), and double URL encoding ("..%255c") of the backslash character.
	
	Even if the web server properly restricts Path Traversal attempts in the URL path, a web application itself may still be vulnerable due to improper handling of user-supplied input. This is a common problem of web applications that use template mechanisms or load static text from files. In variations of the attack, the original URL parameter value is substituted with the file name of one of the web application's dynamic scripts. Consequently, the results can reveal source code because the file is interpreted as text instead of an executable script. These techniques often employ additional special characters such as the dot (".") to reveal the listing of the current working directory, or "%00" NULL characters in order to bypass rudimentary file extension checks.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=%2Fetc%2Fpasswd</uri>
  <param>page</param>
  <attack>root:x:0:0</attack>
  <otherinfo/>
  <solution>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
	
	When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as "red" or "blue."
	
	For filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses, and exclude directory separators such as "/". Use a whitelist of allowable file extensions.
	
	Warning: if you attempt to cleanse your data, then do so that the end result is not in the form that can be dangerous. A sanitizing mechanism can remove characters such as '.' and ';' which may be required for some exploits. An attacker can try to fool the sanitizing mechanism into "cleaning" data into a dangerous form. Suppose the attacker injects a '.' inside a filename (e.g. "sensi.tiveFile") and the sanitizing mechanism removes the character resulting in the valid filename, "sensitiveFile". If the input data are now assumed to be safe, then the file may be compromised. 
	
	Inputs should be decoded and canonicalized to the application's current internal representation before being validated. Make sure that your application does not decode the same input twice. Such errors could be used to bypass whitelist schemes by introducing dangerous inputs after they have been checked.
	
	Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes ".." sequences and symbolic links.
	
	Run your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.
	
	When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.
	
	Run your code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.
	
	OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows you to specify restrictions on file operations.
	
	This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.
	</solution>
  <reference>http://projects.webappsec.org/Path-Traversal
	http://cwe.mitre.org/data/definitions/22.html
	</reference>
  <cweid>22</cweid>
  <wascid>33</wascid>
</alertitem>
<alertitem>
  <pluginid>6</pluginid>
  <alert>Path Traversal</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web document root directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal.
	
	Most web sites restrict user access to a specific portion of the file-system, typically called the "web document root" or "CGI root" directory. These directories contain the files intended for user access and the executable necessary to drive web application functionality. To access files or execute commands anywhere on the file-system, Path Traversal attacks will utilize the ability of special-characters sequences.
	
	The most basic Path Traversal attack uses the "../" special-character sequence to alter the resource location requested in the URL. Although most popular web servers will prevent this technique from escaping the web document root, alternate encodings of the "../" sequence may help bypass the security filters. These method variations include valid and invalid Unicode-encoding ("..%u2216" or "..%c0%af") of the forward slash character, backslash characters ("..\") on Windows-based servers, URL encoded characters "%2e%2e%2f"), and double URL encoding ("..%255c") of the backslash character.
	
	Even if the web server properly restricts Path Traversal attempts in the URL path, a web application itself may still be vulnerable due to improper handling of user-supplied input. This is a common problem of web applications that use template mechanisms or load static text from files. In variations of the attack, the original URL parameter value is substituted with the file name of one of the web application's dynamic scripts. Consequently, the results can reveal source code because the file is interpreted as text instead of an executable script. These techniques often employ additional special characters such as the dot (".") to reveal the listing of the current working directory, or "%00" NULL characters in order to bypass rudimentary file extension checks.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?username=anonymous&amp;page=%2Fetc%2Fpasswd</uri>
  <param>page</param>
  <attack>root:x:0:0</attack>
  <otherinfo/>
  <solution>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
	
	When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as "red" or "blue."
	
	For filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses, and exclude directory separators such as "/". Use a whitelist of allowable file extensions.
	
	Warning: if you attempt to cleanse your data, then do so that the end result is not in the form that can be dangerous. A sanitizing mechanism can remove characters such as '.' and ';' which may be required for some exploits. An attacker can try to fool the sanitizing mechanism into "cleaning" data into a dangerous form. Suppose the attacker injects a '.' inside a filename (e.g. "sensi.tiveFile") and the sanitizing mechanism removes the character resulting in the valid filename, "sensitiveFile". If the input data are now assumed to be safe, then the file may be compromised. 
	
	Inputs should be decoded and canonicalized to the application's current internal representation before being validated. Make sure that your application does not decode the same input twice. Such errors could be used to bypass whitelist schemes by introducing dangerous inputs after they have been checked.
	
	Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes ".." sequences and symbolic links.
	
	Run your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.
	
	When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.
	
	Run your code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.
	
	OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows you to specify restrictions on file operations.
	
	This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.
	</solution>
  <reference>http://projects.webappsec.org/Path-Traversal
	http://cwe.mitre.org/data/definitions/22.html
	</reference>
  <cweid>22</cweid>
  <wascid>33</wascid>
</alertitem>
<alertitem>
  <pluginid>6</pluginid>
  <alert>Path Traversal</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web document root directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal.
	
	Most web sites restrict user access to a specific portion of the file-system, typically called the "web document root" or "CGI root" directory. These directories contain the files intended for user access and the executable necessary to drive web application functionality. To access files or execute commands anywhere on the file-system, Path Traversal attacks will utilize the ability of special-characters sequences.
	
	The most basic Path Traversal attack uses the "../" special-character sequence to alter the resource location requested in the URL. Although most popular web servers will prevent this technique from escaping the web document root, alternate encodings of the "../" sequence may help bypass the security filters. These method variations include valid and invalid Unicode-encoding ("..%u2216" or "..%c0%af") of the forward slash character, backslash characters ("..\") on Windows-based servers, URL encoded characters "%2e%2e%2f"), and double URL encoding ("..%255c") of the backslash character.
	
	Even if the web server properly restricts Path Traversal attempts in the URL path, a web application itself may still be vulnerable due to improper handling of user-supplied input. This is a common problem of web applications that use template mechanisms or load static text from files. In variations of the attack, the original URL parameter value is substituted with the file name of one of the web application's dynamic scripts. Consequently, the results can reveal source code because the file is interpreted as text instead of an executable script. These techniques often employ additional special characters such as the dot (".") to reveal the listing of the current working directory, or "%00" NULL characters in order to bypass rudimentary file extension checks.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=%2Fetc%2Fpasswd&amp;forwardurl=https%3A%2F%2Faddons.mozilla.org%2Fen-US%2Ffirefox%2Fcollections%2Fjdruin%2Fpr%2F</uri>
  <param>page</param>
  <attack>root:x:0:0</attack>
  <otherinfo/>
  <solution>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
	
	When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as "red" or "blue."
	
	For filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses, and exclude directory separators such as "/". Use a whitelist of allowable file extensions.
	
	Warning: if you attempt to cleanse your data, then do so that the end result is not in the form that can be dangerous. A sanitizing mechanism can remove characters such as '.' and ';' which may be required for some exploits. An attacker can try to fool the sanitizing mechanism into "cleaning" data into a dangerous form. Suppose the attacker injects a '.' inside a filename (e.g. "sensi.tiveFile") and the sanitizing mechanism removes the character resulting in the valid filename, "sensitiveFile". If the input data are now assumed to be safe, then the file may be compromised. 
	
	Inputs should be decoded and canonicalized to the application's current internal representation before being validated. Make sure that your application does not decode the same input twice. Such errors could be used to bypass whitelist schemes by introducing dangerous inputs after they have been checked.
	
	Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes ".." sequences and symbolic links.
	
	Run your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.
	
	When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.
	
	Run your code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.
	
	OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows you to specify restrictions on file operations.
	
	This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.
	</solution>
  <reference>http://projects.webappsec.org/Path-Traversal
	http://cwe.mitre.org/data/definitions/22.html
	</reference>
  <cweid>22</cweid>
  <wascid>33</wascid>
</alertitem>
<alertitem>
  <pluginid>6</pluginid>
  <alert>Path Traversal</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web document root directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal.
	
	Most web sites restrict user access to a specific portion of the file-system, typically called the "web document root" or "CGI root" directory. These directories contain the files intended for user access and the executable necessary to drive web application functionality. To access files or execute commands anywhere on the file-system, Path Traversal attacks will utilize the ability of special-characters sequences.
	
	The most basic Path Traversal attack uses the "../" special-character sequence to alter the resource location requested in the URL. Although most popular web servers will prevent this technique from escaping the web document root, alternate encodings of the "../" sequence may help bypass the security filters. These method variations include valid and invalid Unicode-encoding ("..%u2216" or "..%c0%af") of the forward slash character, backslash characters ("..\") on Windows-based servers, URL encoded characters "%2e%2e%2f"), and double URL encoding ("..%255c") of the backslash character.
	
	Even if the web server properly restricts Path Traversal attempts in the URL path, a web application itself may still be vulnerable due to improper handling of user-supplied input. This is a common problem of web applications that use template mechanisms or load static text from files. In variations of the attack, the original URL parameter value is substituted with the file name of one of the web application's dynamic scripts. Consequently, the results can reveal source code because the file is interpreted as text instead of an executable script. These techniques often employ additional special characters such as the dot (".") to reveal the listing of the current working directory, or "%00" NULL characters in order to bypass rudimentary file extension checks.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?username=ZAP&amp;page=%2Fetc%2Fpasswd&amp;user-info-php-submit-button=View+Account+Details&amp;password=ZAP</uri>
  <param>page</param>
  <attack>root:x:0:0</attack>
  <otherinfo/>
  <solution>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
	
	When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as "red" or "blue."
	
	For filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses, and exclude directory separators such as "/". Use a whitelist of allowable file extensions.
	
	Warning: if you attempt to cleanse your data, then do so that the end result is not in the form that can be dangerous. A sanitizing mechanism can remove characters such as '.' and ';' which may be required for some exploits. An attacker can try to fool the sanitizing mechanism into "cleaning" data into a dangerous form. Suppose the attacker injects a '.' inside a filename (e.g. "sensi.tiveFile") and the sanitizing mechanism removes the character resulting in the valid filename, "sensitiveFile". If the input data are now assumed to be safe, then the file may be compromised. 
	
	Inputs should be decoded and canonicalized to the application's current internal representation before being validated. Make sure that your application does not decode the same input twice. Such errors could be used to bypass whitelist schemes by introducing dangerous inputs after they have been checked.
	
	Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes ".." sequences and symbolic links.
	
	Run your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.
	
	When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.
	
	Run your code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.
	
	OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows you to specify restrictions on file operations.
	
	This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.
	</solution>
  <reference>http://projects.webappsec.org/Path-Traversal
	http://cwe.mitre.org/data/definitions/22.html
	</reference>
  <cweid>22</cweid>
  <wascid>33</wascid>
</alertitem>
<alertitem>
  <pluginid>6</pluginid>
  <alert>Path Traversal</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web document root directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal.
	
	Most web sites restrict user access to a specific portion of the file-system, typically called the "web document root" or "CGI root" directory. These directories contain the files intended for user access and the executable necessary to drive web application functionality. To access files or execute commands anywhere on the file-system, Path Traversal attacks will utilize the ability of special-characters sequences.
	
	The most basic Path Traversal attack uses the "../" special-character sequence to alter the resource location requested in the URL. Although most popular web servers will prevent this technique from escaping the web document root, alternate encodings of the "../" sequence may help bypass the security filters. These method variations include valid and invalid Unicode-encoding ("..%u2216" or "..%c0%af") of the forward slash character, backslash characters ("..\") on Windows-based servers, URL encoded characters "%2e%2e%2f"), and double URL encoding ("..%255c") of the backslash character.
	
	Even if the web server properly restricts Path Traversal attempts in the URL path, a web application itself may still be vulnerable due to improper handling of user-supplied input. This is a common problem of web applications that use template mechanisms or load static text from files. In variations of the attack, the original URL parameter value is substituted with the file name of one of the web application's dynamic scripts. Consequently, the results can reveal source code because the file is interpreted as text instead of an executable script. These techniques often employ additional special characters such as the dot (".") to reveal the listing of the current working directory, or "%00" NULL characters in order to bypass rudimentary file extension checks.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?user-poll-php-submit-button=Submit+Vote&amp;page=%2Fetc%2Fpasswd&amp;initials=ZAP&amp;choice=nmap</uri>
  <param>page</param>
  <attack>root:x:0:0</attack>
  <otherinfo/>
  <solution>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
	
	When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as "red" or "blue."
	
	For filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses, and exclude directory separators such as "/". Use a whitelist of allowable file extensions.
	
	Warning: if you attempt to cleanse your data, then do so that the end result is not in the form that can be dangerous. A sanitizing mechanism can remove characters such as '.' and ';' which may be required for some exploits. An attacker can try to fool the sanitizing mechanism into "cleaning" data into a dangerous form. Suppose the attacker injects a '.' inside a filename (e.g. "sensi.tiveFile") and the sanitizing mechanism removes the character resulting in the valid filename, "sensitiveFile". If the input data are now assumed to be safe, then the file may be compromised. 
	
	Inputs should be decoded and canonicalized to the application's current internal representation before being validated. Make sure that your application does not decode the same input twice. Such errors could be used to bypass whitelist schemes by introducing dangerous inputs after they have been checked.
	
	Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes ".." sequences and symbolic links.
	
	Run your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.
	
	When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.
	
	Run your code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.
	
	OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows you to specify restrictions on file operations.
	
	This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.
	</solution>
  <reference>http://projects.webappsec.org/Path-Traversal
	http://cwe.mitre.org/data/definitions/22.html
	</reference>
  <cweid>22</cweid>
  <wascid>33</wascid>
</alertitem>
<alertitem>
  <pluginid>6</pluginid>
  <alert>Path Traversal</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web document root directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal.
	
	Most web sites restrict user access to a specific portion of the file-system, typically called the "web document root" or "CGI root" directory. These directories contain the files intended for user access and the executable necessary to drive web application functionality. To access files or execute commands anywhere on the file-system, Path Traversal attacks will utilize the ability of special-characters sequences.
	
	The most basic Path Traversal attack uses the "../" special-character sequence to alter the resource location requested in the URL. Although most popular web servers will prevent this technique from escaping the web document root, alternate encodings of the "../" sequence may help bypass the security filters. These method variations include valid and invalid Unicode-encoding ("..%u2216" or "..%c0%af") of the forward slash character, backslash characters ("..\") on Windows-based servers, URL encoded characters "%2e%2e%2f"), and double URL encoding ("..%255c") of the backslash character.
	
	Even if the web server properly restricts Path Traversal attempts in the URL path, a web application itself may still be vulnerable due to improper handling of user-supplied input. This is a common problem of web applications that use template mechanisms or load static text from files. In variations of the attack, the original URL parameter value is substituted with the file name of one of the web application's dynamic scripts. Consequently, the results can reveal source code because the file is interpreted as text instead of an executable script. These techniques often employ additional special characters such as the dot (".") to reveal the listing of the current working directory, or "%00" NULL characters in order to bypass rudimentary file extension checks.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=text-file-viewer.php</uri>
  <param>textfile</param>
  <attack>root:x:0:0</attack>
  <otherinfo/>
  <solution>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
	
	When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as "red" or "blue."
	
	For filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses, and exclude directory separators such as "/". Use a whitelist of allowable file extensions.
	
	Warning: if you attempt to cleanse your data, then do so that the end result is not in the form that can be dangerous. A sanitizing mechanism can remove characters such as '.' and ';' which may be required for some exploits. An attacker can try to fool the sanitizing mechanism into "cleaning" data into a dangerous form. Suppose the attacker injects a '.' inside a filename (e.g. "sensi.tiveFile") and the sanitizing mechanism removes the character resulting in the valid filename, "sensitiveFile". If the input data are now assumed to be safe, then the file may be compromised. 
	
	Inputs should be decoded and canonicalized to the application's current internal representation before being validated. Make sure that your application does not decode the same input twice. Such errors could be used to bypass whitelist schemes by introducing dangerous inputs after they have been checked.
	
	Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes ".." sequences and symbolic links.
	
	Run your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.
	
	When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.
	
	Run your code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.
	
	OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows you to specify restrictions on file operations.
	
	This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.
	</solution>
  <reference>http://projects.webappsec.org/Path-Traversal
	http://cwe.mitre.org/data/definitions/22.html
	</reference>
  <cweid>22</cweid>
  <wascid>33</wascid>
</alertitem>
<alertitem>
  <pluginid>6</pluginid>
  <alert>Path Traversal</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web document root directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal.
	
	Most web sites restrict user access to a specific portion of the file-system, typically called the "web document root" or "CGI root" directory. These directories contain the files intended for user access and the executable necessary to drive web application functionality. To access files or execute commands anywhere on the file-system, Path Traversal attacks will utilize the ability of special-characters sequences.
	
	The most basic Path Traversal attack uses the "../" special-character sequence to alter the resource location requested in the URL. Although most popular web servers will prevent this technique from escaping the web document root, alternate encodings of the "../" sequence may help bypass the security filters. These method variations include valid and invalid Unicode-encoding ("..%u2216" or "..%c0%af") of the forward slash character, backslash characters ("..\") on Windows-based servers, URL encoded characters "%2e%2e%2f"), and double URL encoding ("..%255c") of the backslash character.
	
	Even if the web server properly restricts Path Traversal attempts in the URL path, a web application itself may still be vulnerable due to improper handling of user-supplied input. This is a common problem of web applications that use template mechanisms or load static text from files. In variations of the attack, the original URL parameter value is substituted with the file name of one of the web application's dynamic scripts. Consequently, the results can reveal source code because the file is interpreted as text instead of an executable script. These techniques often employ additional special characters such as the dot (".") to reveal the listing of the current working directory, or "%00" NULL characters in order to bypass rudimentary file extension checks.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=source-viewer.php</uri>
  <param>page</param>
  <attack>root:x:0:0</attack>
  <otherinfo/>
  <solution>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
	
	When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as "red" or "blue."
	
	For filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses, and exclude directory separators such as "/". Use a whitelist of allowable file extensions.
	
	Warning: if you attempt to cleanse your data, then do so that the end result is not in the form that can be dangerous. A sanitizing mechanism can remove characters such as '.' and ';' which may be required for some exploits. An attacker can try to fool the sanitizing mechanism into "cleaning" data into a dangerous form. Suppose the attacker injects a '.' inside a filename (e.g. "sensi.tiveFile") and the sanitizing mechanism removes the character resulting in the valid filename, "sensitiveFile". If the input data are now assumed to be safe, then the file may be compromised. 
	
	Inputs should be decoded and canonicalized to the application's current internal representation before being validated. Make sure that your application does not decode the same input twice. Such errors could be used to bypass whitelist schemes by introducing dangerous inputs after they have been checked.
	
	Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes ".." sequences and symbolic links.
	
	Run your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.
	
	When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.
	
	Run your code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.
	
	OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows you to specify restrictions on file operations.
	
	This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.
	</solution>
  <reference>http://projects.webappsec.org/Path-Traversal
	http://cwe.mitre.org/data/definitions/22.html
	</reference>
  <cweid>22</cweid>
  <wascid>33</wascid>
</alertitem>
<alertitem>
  <pluginid>6</pluginid>
  <alert>Path Traversal</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web document root directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal.
	
	Most web sites restrict user access to a specific portion of the file-system, typically called the "web document root" or "CGI root" directory. These directories contain the files intended for user access and the executable necessary to drive web application functionality. To access files or execute commands anywhere on the file-system, Path Traversal attacks will utilize the ability of special-characters sequences.
	
	The most basic Path Traversal attack uses the "../" special-character sequence to alter the resource location requested in the URL. Although most popular web servers will prevent this technique from escaping the web document root, alternate encodings of the "../" sequence may help bypass the security filters. These method variations include valid and invalid Unicode-encoding ("..%u2216" or "..%c0%af") of the forward slash character, backslash characters ("..\") on Windows-based servers, URL encoded characters "%2e%2e%2f"), and double URL encoding ("..%255c") of the backslash character.
	
	Even if the web server properly restricts Path Traversal attempts in the URL path, a web application itself may still be vulnerable due to improper handling of user-supplied input. This is a common problem of web applications that use template mechanisms or load static text from files. In variations of the attack, the original URL parameter value is substituted with the file name of one of the web application's dynamic scripts. Consequently, the results can reveal source code because the file is interpreted as text instead of an executable script. These techniques often employ additional special characters such as the dot (".") to reveal the listing of the current working directory, or "%00" NULL characters in order to bypass rudimentary file extension checks.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=source-viewer.php</uri>
  <param>phpfile</param>
  <attack>root:x:0:0</attack>
  <otherinfo/>
  <solution>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
	
	When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as "red" or "blue."
	
	For filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses, and exclude directory separators such as "/". Use a whitelist of allowable file extensions.
	
	Warning: if you attempt to cleanse your data, then do so that the end result is not in the form that can be dangerous. A sanitizing mechanism can remove characters such as '.' and ';' which may be required for some exploits. An attacker can try to fool the sanitizing mechanism into "cleaning" data into a dangerous form. Suppose the attacker injects a '.' inside a filename (e.g. "sensi.tiveFile") and the sanitizing mechanism removes the character resulting in the valid filename, "sensitiveFile". If the input data are now assumed to be safe, then the file may be compromised. 
	
	Inputs should be decoded and canonicalized to the application's current internal representation before being validated. Make sure that your application does not decode the same input twice. Such errors could be used to bypass whitelist schemes by introducing dangerous inputs after they have been checked.
	
	Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes ".." sequences and symbolic links.
	
	Run your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.
	
	When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.
	
	Run your code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.
	
	OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows you to specify restrictions on file operations.
	
	This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.
	</solution>
  <reference>http://projects.webappsec.org/Path-Traversal
	http://cwe.mitre.org/data/definitions/22.html
	</reference>
  <cweid>22</cweid>
  <wascid>33</wascid>
</alertitem>
<alertitem>
  <pluginid>40012</pluginid>
  <alert>Cross Site Scripting (Reflected)</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.
	When an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.
	
	There are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.
	Non-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.
	Persistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=javascript%3Aalert%281%29%3B</uri>
  <param>page</param>
  <attack>javascript:alert(1);</attack>
  <otherinfo/>
  <evidence>javascript:alert(1);</evidence>
  <solution>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.
	
	Phases: Implementation; Architecture and Design
	Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.
	For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.
	Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.
	
	Phase: Architecture and Design
	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
	
	If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.
	
	Phase: Implementation
	For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.
	
	To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
	
	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
	
	When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as "red" or "blue."
	
	Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.
	</solution>
  <reference>http://projects.webappsec.org/Cross-Site-Scripting
	http://cwe.mitre.org/data/definitions/79.html
	</reference>
  <cweid>79</cweid>
  <wascid>8</wascid>
</alertitem>
<alertitem>
  <pluginid>40012</pluginid>
  <alert>Cross Site Scripting (Reflected)</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.
	When an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.
	
	There are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.
	Non-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.
	Persistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?username=%3C%2Fscript%3E%3Cscript%3Ealert%281%29%3B%3C%2Fscript%3E%3Cscript%3E&amp;page=password-generator.php</uri>
  <param>username</param>
  <attack>&lt;/script&gt;&lt;script&gt;alert(1);&lt;/script&gt;&lt;script&gt;</attack>
  <otherinfo/>
  <evidence>&lt;/script&gt;&lt;script&gt;alert(1);&lt;/script&gt;&lt;script&gt;</evidence>
  <solution>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.
	
	Phases: Implementation; Architecture and Design
	Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.
	For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.
	Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.
	
	Phase: Architecture and Design
	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
	
	If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.
	
	Phase: Implementation
	For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.
	
	To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
	
	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
	
	When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as "red" or "blue."
	
	Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.
	</solution>
  <reference>http://projects.webappsec.org/Cross-Site-Scripting
	http://cwe.mitre.org/data/definitions/79.html
	</reference>
  <cweid>79</cweid>
  <wascid>8</wascid>
</alertitem>
<alertitem>
  <pluginid>40012</pluginid>
  <alert>Cross Site Scripting (Reflected)</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.
	When an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.
	
	There are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.
	Non-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.
	Persistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?username=anonymous&amp;page=javascript%3Aalert%281%29%3B</uri>
  <param>page</param>
  <attack>javascript:alert(1);</attack>
  <otherinfo/>
  <evidence>javascript:alert(1);</evidence>
  <solution>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.
	
	Phases: Implementation; Architecture and Design
	Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.
	For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.
	Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.
	
	Phase: Architecture and Design
	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
	
	If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.
	
	Phase: Implementation
	For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.
	
	To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
	
	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
	
	When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as "red" or "blue."
	
	Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.
	</solution>
  <reference>http://projects.webappsec.org/Cross-Site-Scripting
	http://cwe.mitre.org/data/definitions/79.html
	</reference>
  <cweid>79</cweid>
  <wascid>8</wascid>
</alertitem>
<alertitem>
  <pluginid>40012</pluginid>
  <alert>Cross Site Scripting (Reflected)</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.
	When an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.
	
	There are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.
	Non-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.
	Persistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=javascript%3Aalert%281%29%3B&amp;forwardurl=https%3A%2F%2Faddons.mozilla.org%2Fen-US%2Ffirefox%2Fcollections%2Fjdruin%2Fpr%2F</uri>
  <param>page</param>
  <attack>javascript:alert(1);</attack>
  <otherinfo/>
  <evidence>javascript:alert(1);</evidence>
  <solution>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.
	
	Phases: Implementation; Architecture and Design
	Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.
	For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.
	Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.
	
	Phase: Architecture and Design
	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
	
	If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.
	
	Phase: Implementation
	For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.
	
	To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
	
	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
	
	When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as "red" or "blue."
	
	Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.
	</solution>
  <reference>http://projects.webappsec.org/Cross-Site-Scripting
	http://cwe.mitre.org/data/definitions/79.html
	</reference>
  <cweid>79</cweid>
  <wascid>8</wascid>
</alertitem>
<alertitem>
  <pluginid>40012</pluginid>
  <alert>Cross Site Scripting (Reflected)</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.
	When an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.
	
	There are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.
	Non-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.
	Persistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=login.php</uri>
  <param>username</param>
  <attack>&lt;/td&gt;&lt;script&gt;alert(1);&lt;/script&gt;&lt;td&gt;</attack>
  <otherinfo/>
  <evidence>&lt;/td&gt;&lt;script&gt;alert(1);&lt;/script&gt;&lt;td&gt;</evidence>
  <solution>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.
	
	Phases: Implementation; Architecture and Design
	Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.
	For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.
	Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.
	
	Phase: Architecture and Design
	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
	
	If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.
	
	Phase: Implementation
	For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.
	
	To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
	
	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
	
	When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as "red" or "blue."
	
	Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.
	</solution>
  <reference>http://projects.webappsec.org/Cross-Site-Scripting
	http://cwe.mitre.org/data/definitions/79.html
	</reference>
  <cweid>79</cweid>
  <wascid>8</wascid>
</alertitem>
<alertitem>
  <pluginid>40012</pluginid>
  <alert>Cross Site Scripting (Reflected)</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.
	When an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.
	
	There are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.
	Non-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.
	Persistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=redirectandlog.php&amp;forwardurl=%22%3E%3Cscript%3Ealert%281%29%3B%3C%2Fscript%3E</uri>
  <param>forwardurl</param>
  <attack>"&gt;&lt;script&gt;alert(1);&lt;/script&gt;</attack>
  <otherinfo/>
  <evidence>"&gt;&lt;script&gt;alert(1);&lt;/script&gt;</evidence>
  <solution>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.
	
	Phases: Implementation; Architecture and Design
	Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.
	For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.
	Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.
	
	Phase: Architecture and Design
	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
	
	If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.
	
	Phase: Implementation
	For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.
	
	To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
	
	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
	
	When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as "red" or "blue."
	
	Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.
	</solution>
  <reference>http://projects.webappsec.org/Cross-Site-Scripting
	http://cwe.mitre.org/data/definitions/79.html
	</reference>
  <cweid>79</cweid>
  <wascid>8</wascid>
</alertitem>
<alertitem>
  <pluginid>40012</pluginid>
  <alert>Cross Site Scripting (Reflected)</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.
	When an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.
	
	There are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.
	Non-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.
	Persistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?username=%3C%2Ftd%3E%3Cscript%3Ealert%281%29%3B%3C%2Fscript%3E%3Ctd%3E&amp;page=user-info.php&amp;user-info-php-submit-button=View+Account+Details&amp;password=ZAP</uri>
  <param>username</param>
  <attack>&lt;/td&gt;&lt;script&gt;alert(1);&lt;/script&gt;&lt;td&gt;</attack>
  <otherinfo/>
  <evidence>&lt;/td&gt;&lt;script&gt;alert(1);&lt;/script&gt;&lt;td&gt;</evidence>
  <solution>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.
	
	Phases: Implementation; Architecture and Design
	Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.
	For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.
	Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.
	
	Phase: Architecture and Design
	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
	
	If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.
	
	Phase: Implementation
	For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.
	
	To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
	
	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
	
	When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as "red" or "blue."
	
	Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.
	</solution>
  <reference>http://projects.webappsec.org/Cross-Site-Scripting
	http://cwe.mitre.org/data/definitions/79.html
	</reference>
  <cweid>79</cweid>
  <wascid>8</wascid>
</alertitem>
<alertitem>
  <pluginid>40012</pluginid>
  <alert>Cross Site Scripting (Reflected)</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.
	When an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.
	
	There are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.
	Non-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.
	Persistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=login.php</uri>
  <param>password</param>
  <attack>&lt;/td&gt;&lt;script&gt;alert(1);&lt;/script&gt;&lt;td&gt;</attack>
  <otherinfo/>
  <evidence>&lt;/td&gt;&lt;script&gt;alert(1);&lt;/script&gt;&lt;td&gt;</evidence>
  <solution>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.
	
	Phases: Implementation; Architecture and Design
	Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.
	For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.
	Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.
	
	Phase: Architecture and Design
	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
	
	If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.
	
	Phase: Implementation
	For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.
	
	To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
	
	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
	
	When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as "red" or "blue."
	
	Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.
	</solution>
  <reference>http://projects.webappsec.org/Cross-Site-Scripting
	http://cwe.mitre.org/data/definitions/79.html
	</reference>
  <cweid>79</cweid>
  <wascid>8</wascid>
</alertitem>
<alertitem>
  <pluginid>40012</pluginid>
  <alert>Cross Site Scripting (Reflected)</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.
	When an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.
	
	There are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.
	Non-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.
	Persistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?username=ZAP&amp;page=javascript%3Aalert%281%29%3B&amp;user-info-php-submit-button=View+Account+Details&amp;password=ZAP</uri>
  <param>page</param>
  <attack>javascript:alert(1);</attack>
  <otherinfo/>
  <evidence>javascript:alert(1);</evidence>
  <solution>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.
	
	Phases: Implementation; Architecture and Design
	Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.
	For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.
	Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.
	
	Phase: Architecture and Design
	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
	
	If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.
	
	Phase: Implementation
	For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.
	
	To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
	
	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
	
	When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as "red" or "blue."
	
	Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.
	</solution>
  <reference>http://projects.webappsec.org/Cross-Site-Scripting
	http://cwe.mitre.org/data/definitions/79.html
	</reference>
  <cweid>79</cweid>
  <wascid>8</wascid>
</alertitem>
<alertitem>
  <pluginid>40012</pluginid>
  <alert>Cross Site Scripting (Reflected)</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.
	When an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.
	
	There are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.
	Non-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.
	Persistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?username=ZAP&amp;page=user-info.php&amp;user-info-php-submit-button=View+Account+Details&amp;password=%3C%2Ftd%3E%3Cscript%3Ealert%281%29%3B%3C%2Fscript%3E%3Ctd%3E</uri>
  <param>password</param>
  <attack>&lt;/td&gt;&lt;script&gt;alert(1);&lt;/script&gt;&lt;td&gt;</attack>
  <otherinfo/>
  <evidence>&lt;/td&gt;&lt;script&gt;alert(1);&lt;/script&gt;&lt;td&gt;</evidence>
  <solution>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.
	
	Phases: Implementation; Architecture and Design
	Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.
	For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.
	Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.
	
	Phase: Architecture and Design
	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
	
	If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.
	
	Phase: Implementation
	For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.
	
	To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
	
	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
	
	When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as "red" or "blue."
	
	Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.
	</solution>
  <reference>http://projects.webappsec.org/Cross-Site-Scripting
	http://cwe.mitre.org/data/definitions/79.html
	</reference>
  <cweid>79</cweid>
  <wascid>8</wascid>
</alertitem>
<alertitem>
  <pluginid>40012</pluginid>
  <alert>Cross Site Scripting (Reflected)</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.
	When an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.
	
	There are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.
	Non-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.
	Persistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=register.php</uri>
  <param>username</param>
  <attack>&lt;/td&gt;&lt;script&gt;alert(1);&lt;/script&gt;&lt;td&gt;</attack>
  <otherinfo/>
  <evidence>&lt;/td&gt;&lt;script&gt;alert(1);&lt;/script&gt;&lt;td&gt;</evidence>
  <solution>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.
	
	Phases: Implementation; Architecture and Design
	Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.
	For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.
	Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.
	
	Phase: Architecture and Design
	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
	
	If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.
	
	Phase: Implementation
	For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.
	
	To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
	
	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
	
	When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as "red" or "blue."
	
	Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.
	</solution>
  <reference>http://projects.webappsec.org/Cross-Site-Scripting
	http://cwe.mitre.org/data/definitions/79.html
	</reference>
  <cweid>79</cweid>
  <wascid>8</wascid>
</alertitem>
<alertitem>
  <pluginid>40012</pluginid>
  <alert>Cross Site Scripting (Reflected)</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.
	When an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.
	
	There are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.
	Non-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.
	Persistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=view-someones-blog.php</uri>
  <param>author</param>
  <attack>&lt;/td&gt;&lt;script&gt;alert(1);&lt;/script&gt;&lt;td&gt;</attack>
  <otherinfo/>
  <evidence>&lt;/td&gt;&lt;script&gt;alert(1);&lt;/script&gt;&lt;td&gt;</evidence>
  <solution>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.
	
	Phases: Implementation; Architecture and Design
	Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.
	For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.
	Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.
	
	Phase: Architecture and Design
	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
	
	If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.
	
	Phase: Implementation
	For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.
	
	To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
	
	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
	
	When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as "red" or "blue."
	
	Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.
	</solution>
  <reference>http://projects.webappsec.org/Cross-Site-Scripting
	http://cwe.mitre.org/data/definitions/79.html
	</reference>
  <cweid>79</cweid>
  <wascid>8</wascid>
</alertitem>
<alertitem>
  <pluginid>40012</pluginid>
  <alert>Cross Site Scripting (Reflected)</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.
	When an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.
	
	There are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.
	Non-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.
	Persistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=register.php</uri>
  <param>my_signature</param>
  <attack>&lt;/td&gt;&lt;script&gt;alert(1);&lt;/script&gt;&lt;td&gt;</attack>
  <otherinfo/>
  <evidence>&lt;/td&gt;&lt;script&gt;alert(1);&lt;/script&gt;&lt;td&gt;</evidence>
  <solution>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.
	
	Phases: Implementation; Architecture and Design
	Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.
	For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.
	Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.
	
	Phase: Architecture and Design
	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
	
	If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.
	
	Phase: Implementation
	For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.
	
	To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
	
	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
	
	When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as "red" or "blue."
	
	Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.
	</solution>
  <reference>http://projects.webappsec.org/Cross-Site-Scripting
	http://cwe.mitre.org/data/definitions/79.html
	</reference>
  <cweid>79</cweid>
  <wascid>8</wascid>
</alertitem>
<alertitem>
  <pluginid>40012</pluginid>
  <alert>Cross Site Scripting (Reflected)</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.
	When an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.
	
	There are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.
	Non-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.
	Persistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=add-to-your-blog.php</uri>
  <param>blog_entry</param>
  <attack>&lt;/td&gt;&lt;script&gt;alert(1);&lt;/script&gt;&lt;td&gt;</attack>
  <otherinfo/>
  <evidence>&lt;/td&gt;&lt;script&gt;alert(1);&lt;/script&gt;&lt;td&gt;</evidence>
  <solution>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.
	
	Phases: Implementation; Architecture and Design
	Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.
	For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.
	Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.
	
	Phase: Architecture and Design
	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
	
	If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.
	
	Phase: Implementation
	For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.
	
	To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
	
	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
	
	When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as "red" or "blue."
	
	Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.
	</solution>
  <reference>http://projects.webappsec.org/Cross-Site-Scripting
	http://cwe.mitre.org/data/definitions/79.html
	</reference>
  <cweid>79</cweid>
  <wascid>8</wascid>
</alertitem>
<alertitem>
  <pluginid>40012</pluginid>
  <alert>Cross Site Scripting (Reflected)</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.
	When an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.
	
	There are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.
	Non-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.
	Persistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=set-background-color.php</uri>
  <param>background_color</param>
  <attack>"&gt;&lt;script&gt;alert(1);&lt;/script&gt;</attack>
  <otherinfo/>
  <evidence>"&gt;&lt;script&gt;alert(1);&lt;/script&gt;</evidence>
  <solution>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.
	
	Phases: Implementation; Architecture and Design
	Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.
	For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.
	Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.
	
	Phase: Architecture and Design
	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
	
	If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.
	
	Phase: Implementation
	For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.
	
	To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
	
	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
	
	When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as "red" or "blue."
	
	Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.
	</solution>
  <reference>http://projects.webappsec.org/Cross-Site-Scripting
	http://cwe.mitre.org/data/definitions/79.html
	</reference>
  <cweid>79</cweid>
  <wascid>8</wascid>
</alertitem>
<alertitem>
  <pluginid>40012</pluginid>
  <alert>Cross Site Scripting (Reflected)</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.
	When an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.
	
	There are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.
	Non-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.
	Persistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?user-poll-php-submit-button=Submit+Vote&amp;page=javascript%3Aalert%281%29%3B&amp;initials=ZAP&amp;choice=nmap</uri>
  <param>page</param>
  <attack>javascript:alert(1);</attack>
  <otherinfo/>
  <evidence>javascript:alert(1);</evidence>
  <solution>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.
	
	Phases: Implementation; Architecture and Design
	Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.
	For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.
	Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.
	
	Phase: Architecture and Design
	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
	
	If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.
	
	Phase: Implementation
	For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.
	
	To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
	
	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
	
	When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as "red" or "blue."
	
	Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.
	</solution>
  <reference>http://projects.webappsec.org/Cross-Site-Scripting
	http://cwe.mitre.org/data/definitions/79.html
	</reference>
  <cweid>79</cweid>
  <wascid>8</wascid>
</alertitem>
<alertitem>
  <pluginid>40012</pluginid>
  <alert>Cross Site Scripting (Reflected)</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.
	When an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.
	
	There are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.
	Non-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.
	Persistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?user-poll-php-submit-button=Submit+Vote&amp;page=user-poll.php&amp;initials=ZAP&amp;choice=%3C%2Ftd%3E%3Cscript%3Ealert%281%29%3B%3C%2Fscript%3E%3Ctd%3E</uri>
  <param>choice</param>
  <attack>&lt;/td&gt;&lt;script&gt;alert(1);&lt;/script&gt;&lt;td&gt;</attack>
  <otherinfo/>
  <evidence>&lt;/td&gt;&lt;script&gt;alert(1);&lt;/script&gt;&lt;td&gt;</evidence>
  <solution>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.
	
	Phases: Implementation; Architecture and Design
	Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.
	For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.
	Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.
	
	Phase: Architecture and Design
	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
	
	If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.
	
	Phase: Implementation
	For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.
	
	To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
	
	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
	
	When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as "red" or "blue."
	
	Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.
	</solution>
  <reference>http://projects.webappsec.org/Cross-Site-Scripting
	http://cwe.mitre.org/data/definitions/79.html
	</reference>
  <cweid>79</cweid>
  <wascid>8</wascid>
</alertitem>
<alertitem>
  <pluginid>40012</pluginid>
  <alert>Cross Site Scripting (Reflected)</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.
	When an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.
	
	There are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.
	Non-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.
	Persistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=text-file-viewer.php</uri>
  <param>textfile</param>
  <attack>&lt;/blockquote&gt;&lt;script&gt;alert(1);&lt;/script&gt;&lt;blockquote&gt;</attack>
  <otherinfo/>
  <evidence>&lt;/blockquote&gt;&lt;script&gt;alert(1);&lt;/script&gt;&lt;blockquote&gt;</evidence>
  <solution>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.
	
	Phases: Implementation; Architecture and Design
	Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.
	For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.
	Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.
	
	Phase: Architecture and Design
	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
	
	If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.
	
	Phase: Implementation
	For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.
	
	To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
	
	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
	
	When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as "red" or "blue."
	
	Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.
	</solution>
  <reference>http://projects.webappsec.org/Cross-Site-Scripting
	http://cwe.mitre.org/data/definitions/79.html
	</reference>
  <cweid>79</cweid>
  <wascid>8</wascid>
</alertitem>
<alertitem>
  <pluginid>40012</pluginid>
  <alert>Cross Site Scripting (Reflected)</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.
	When an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.
	
	There are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.
	Non-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.
	Persistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=source-viewer.php</uri>
  <param>page</param>
  <attack>javascript:alert(1);</attack>
  <otherinfo/>
  <evidence>javascript:alert(1);</evidence>
  <solution>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.
	
	Phases: Implementation; Architecture and Design
	Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.
	For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.
	Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.
	
	Phase: Architecture and Design
	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
	
	If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.
	
	Phase: Implementation
	For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.
	
	To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
	
	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
	
	When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as "red" or "blue."
	
	Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.
	</solution>
  <reference>http://projects.webappsec.org/Cross-Site-Scripting
	http://cwe.mitre.org/data/definitions/79.html
	</reference>
  <cweid>79</cweid>
  <wascid>8</wascid>
</alertitem>
<alertitem>
  <pluginid>40012</pluginid>
  <alert>Cross Site Scripting (Reflected)</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.
	When an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.
	
	There are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.
	Non-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.
	Persistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=source-viewer.php</uri>
  <param>phpfile</param>
  <attack>&lt;/p&gt;&lt;script&gt;alert(1);&lt;/script&gt;&lt;p&gt;</attack>
  <otherinfo/>
  <evidence>&lt;/p&gt;&lt;script&gt;alert(1);&lt;/script&gt;&lt;p&gt;</evidence>
  <solution>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.
	
	Phases: Implementation; Architecture and Design
	Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.
	For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.
	Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.
	
	Phase: Architecture and Design
	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
	
	If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.
	
	Phase: Implementation
	For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.
	
	To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
	
	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
	
	When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as "red" or "blue."
	
	Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.
	</solution>
  <reference>http://projects.webappsec.org/Cross-Site-Scripting
	http://cwe.mitre.org/data/definitions/79.html
	</reference>
  <cweid>79</cweid>
  <wascid>8</wascid>
</alertitem>
<alertitem>
  <pluginid>40012</pluginid>
  <alert>Cross Site Scripting (Reflected)</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.
	When an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.
	
	There are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.
	Non-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.
	Persistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=dns-lookup.php</uri>
  <param>target_host</param>
  <attack>&lt;/p&gt;&lt;script&gt;alert(1);&lt;/script&gt;&lt;p&gt;</attack>
  <otherinfo/>
  <evidence>&lt;/p&gt;&lt;script&gt;alert(1);&lt;/script&gt;&lt;p&gt;</evidence>
  <solution>Phase: Architecture and Design
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.
	
	Phases: Implementation; Architecture and Design
	Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.
	For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.
	Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.
	
	Phase: Architecture and Design
	For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
	
	If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.
	
	Phase: Implementation
	For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.
	
	To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
	
	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
	
	When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as "red" or "blue."
	
	Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.
	</solution>
  <reference>http://projects.webappsec.org/Cross-Site-Scripting
	http://cwe.mitre.org/data/definitions/79.html
	</reference>
  <cweid>79</cweid>
  <wascid>8</wascid>
</alertitem>
<alertitem>
  <pluginid>40018</pluginid>
  <alert>SQL Injection</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>SQL injection may be possible
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=text-file-viewer.php</uri>
  <param>text-file-viewer-php-submit-button</param>
  <attack>View File AND 1=1 -- </attack>
  <otherinfo>The page results were successfully manipulated using the boolean conditions [View File AND 1=1 -- ] and [View File AND 1=2 -- ]
The parameter value being modified was NOT stripped from the HTML output for the purposes of the comparison
Data was returned for the original parameter.
The vulnerability was detected by successfully restricting the data originally returned, by manipulating the parameter</otherinfo>
  <solution>Do not trust client side input, even if there is client side validation in place.  
	In general, type check all data on the server side.
	If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'
	If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.
	If database Stored Procedures can be used, use them.
	Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality!
	Do not create dynamic SQL queries using simple string concatenation.
	Escape all data received from the client.
	Apply a 'whitelist' of allowed characters, or a 'blacklist' of disallowed characters in user input.
	Apply the privilege of least privilege by using the least privileged database user possible.
	In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.
	Grant the minimum database access that is necessary for the application.
	</solution>
  <otherinfo>The page results were successfully manipulated using the boolean conditions [View File AND 1=1 -- ] and [View File AND 1=2 -- ]
	The parameter value being modified was NOT stripped from the HTML output for the purposes of the comparison
	Data was returned for the original parameter.
	The vulnerability was detected by successfully restricting the data originally returned, by manipulating the parameter
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2010-A1
	https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
	</reference>
  <cweid>89</cweid>
  <wascid>19</wascid>
</alertitem>
<alertitem>
  <pluginid>90020</pluginid>
  <alert>Remote OS Command Injection Plugin</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>Attack technique used for unauthorized execution of operating system commands. This attack is possible when an application accepts untrusted input to build operating system commands in an insecure manner involving improper data sanitization, and/or improper calling of external programs.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=dns-lookup.php</uri>
  <param>target_host</param>
  <attack>&amp;cat /etc/passwd&amp;</attack>
  <otherinfo/>
  <evidence>root:x:0:0</evidence>
  <solution>If at all possible, use library calls rather than external processes to recreate the desired functionality.
	
	Run your code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.
	
	OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows you to specify restrictions on file operations.
	This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.
	
	For any data that will be used to generate a command to be executed, keep as much of that data out of external control as possible. For example, in web applications, this may require storing the command locally in the session's state instead of sending it out to the client in a hidden form field.
	
	Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
	
	For example, consider using the ESAPI Encoding control or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.
	
	If you need to use dynamically-generated query strings or commands in spite of the risk, properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection.
	
	If the program to be executed allows arguments to be specified within an input file or from standard input, then consider using that mode to pass arguments instead of the command line.
	
	If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.
	
	Some languages offer multiple functions that can be used to invoke commands. Where possible, identify any function that invokes a command shell using a single string, and replace it with a function that requires individual arguments. These functions typically perform appropriate quoting and filtering of arguments. For example, in C, the system() function accepts a string that contains the entire command to be executed, whereas execl(), execve(), and others require an array of strings, one for each argument. In Windows, CreateProcess() only accepts one command at a time. In Perl, if system() is provided with an array of arguments, then it will quote each of the arguments.
	
	Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
	
	When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as "red" or "blue."
	
	When constructing OS command strings, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping.
	
	Note that proper output encoding, escaping, and quoting is the most effective solution for preventing OS command injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent OS command injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, when invoking a mail program, you might need to allow the subject field to contain otherwise-dangerous inputs like ";" and "&gt;" characters, which would need to be escaped or otherwise handled. In this case, stripping the character might reduce the risk of OS command injection, but it would produce incorrect behavior because the subject field would not be recorded as the user intended. This might seem to be a minor inconvenience, but it could be more important when the program relies on well-structured subject lines in order to pass messages to other components.
	
	Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.
	</solution>
  <reference>http://cwe.mitre.org/data/definitions/78.html
	https://www.owasp.org/index.php/Command_Injection
	</reference>
  <cweid>78</cweid>
  <wascid>31</wascid>
</alertitem>
<alertitem>
  <pluginid>0</pluginid>
  <alert>Directory browsing</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>It is possible to view the directory listing.  Directory listing may reveal hidden scripts, include files , backup source files etc which be accessed to read sensitive information.
	</desc>
  <uri>http://172.16.162.128/mutillidae/documentation/</uri>
  <param/>
  <attack>Parent Directory</attack>
  <otherinfo/>
  <solution>Disable directory browsing.  If this is required, make sure the listed files does not induce risks.
	</solution>
  <reference>For IIS, turn off directory browsing.
	For Apache, use the 'Options -Indexes' directive to disable indexes in directory or via .htaccess:
	. http://httpd.apache.org/docs/mod/core.html#options
	. http://alamo.satlug.org/pipermail/satlug/2002-February/000053.html
	. or create a default index.html for each directory.
	</reference>
  <cweid>548</cweid>
  <wascid>48</wascid>
</alertitem>
<alertitem>
  <pluginid>0</pluginid>
  <alert>Directory browsing</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>It is possible to view the directory listing.  Directory listing may reveal hidden scripts, include files , backup source files etc which be accessed to read sensitive information.
	</desc>
  <uri>http://172.16.162.128/mutillidae/images/</uri>
  <param/>
  <attack>Parent Directory</attack>
  <otherinfo/>
  <solution>Disable directory browsing.  If this is required, make sure the listed files does not induce risks.
	</solution>
  <reference>For IIS, turn off directory browsing.
	For Apache, use the 'Options -Indexes' directive to disable indexes in directory or via .htaccess:
	. http://httpd.apache.org/docs/mod/core.html#options
	. http://alamo.satlug.org/pipermail/satlug/2002-February/000053.html
	. or create a default index.html for each directory.
	</reference>
  <cweid>548</cweid>
  <wascid>48</wascid>
</alertitem>
<alertitem>
  <pluginid>0</pluginid>
  <alert>Directory browsing</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>It is possible to view the directory listing.  Directory listing may reveal hidden scripts, include files , backup source files etc which be accessed to read sensitive information.
	</desc>
  <uri>http://172.16.162.128/mutillidae/javascript/</uri>
  <param/>
  <attack>Parent Directory</attack>
  <otherinfo/>
  <solution>Disable directory browsing.  If this is required, make sure the listed files does not induce risks.
	</solution>
  <reference>For IIS, turn off directory browsing.
	For Apache, use the 'Options -Indexes' directive to disable indexes in directory or via .htaccess:
	. http://httpd.apache.org/docs/mod/core.html#options
	. http://alamo.satlug.org/pipermail/satlug/2002-February/000053.html
	. or create a default index.html for each directory.
	</reference>
  <cweid>548</cweid>
  <wascid>48</wascid>
</alertitem>
<alertitem>
  <pluginid>0</pluginid>
  <alert>Directory browsing</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>It is possible to view the directory listing.  Directory listing may reveal hidden scripts, include files , backup source files etc which be accessed to read sensitive information.
	</desc>
  <uri>http://172.16.162.128/mutillidae/javascript/ddsmoothmenu/</uri>
  <param/>
  <attack>Parent Directory</attack>
  <otherinfo/>
  <solution>Disable directory browsing.  If this is required, make sure the listed files does not induce risks.
	</solution>
  <reference>For IIS, turn off directory browsing.
	For Apache, use the 'Options -Indexes' directive to disable indexes in directory or via .htaccess:
	. http://httpd.apache.org/docs/mod/core.html#options
	. http://alamo.satlug.org/pipermail/satlug/2002-February/000053.html
	. or create a default index.html for each directory.
	</reference>
  <cweid>548</cweid>
  <wascid>48</wascid>
</alertitem>
<alertitem>
  <pluginid>0</pluginid>
  <alert>Directory browsing</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>It is possible to view the directory listing.  Directory listing may reveal hidden scripts, include files , backup source files etc which be accessed to read sensitive information.
	</desc>
  <uri>http://172.16.162.128/mutillidae/styles/</uri>
  <param/>
  <attack>Parent Directory</attack>
  <otherinfo/>
  <solution>Disable directory browsing.  If this is required, make sure the listed files does not induce risks.
	</solution>
  <reference>For IIS, turn off directory browsing.
	For Apache, use the 'Options -Indexes' directive to disable indexes in directory or via .htaccess:
	. http://httpd.apache.org/docs/mod/core.html#options
	. http://alamo.satlug.org/pipermail/satlug/2002-February/000053.html
	. or create a default index.html for each directory.
	</reference>
  <cweid>548</cweid>
  <wascid>48</wascid>
</alertitem>
<alertitem>
  <pluginid>0</pluginid>
  <alert>Directory browsing</alert>
  <riskcode>2</riskcode>
  <reliability>2</reliability>
  <riskdesc>Medium (Warning)</riskdesc>
  <desc>It is possible to view the directory listing.  Directory listing may reveal hidden scripts, include files , backup source files etc which be accessed to read sensitive information.
	</desc>
  <uri>http://172.16.162.128/mutillidae/styles/ddsmoothmenu/</uri>
  <param/>
  <attack>Parent Directory</attack>
  <otherinfo/>
  <solution>Disable directory browsing.  If this is required, make sure the listed files does not induce risks.
	</solution>
  <reference>For IIS, turn off directory browsing.
	For Apache, use the 'Options -Indexes' directive to disable indexes in directory or via .htaccess:
	. http://httpd.apache.org/docs/mod/core.html#options
	. http://alamo.satlug.org/pipermail/satlug/2002-February/000053.html
	. or create a default index.html for each directory.
	</reference>
  <cweid>548</cweid>
  <wascid>48</wascid>
</alertitem>
<alertitem>
  <pluginid>30000</pluginid>
  <alert>External redirect</alert>
  <riskcode>3</riskcode>
  <reliability>2</reliability>
  <riskdesc>High (Warning)</riskdesc>
  <desc>URL redirectors represent common functionality employed by web sites to forward an incoming request to an alternate resource. This can be done for a variety of reasons and is often done to allow resources to be moved within the directory structure and to avoid breaking functionality for users that request the resource at its previous location. URL redirectors may also be used to implement load balancing, leveraging abbreviated URLs or recording outgoing links. It is this last implementation which is often used in phishing attacks as described in the example below. URL redirectors do not necessarily represent a direct security vulnerability but can be abused by attackers trying to social engineer victims into believing that they are navigating to a site other than the true destination.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=redirectandlog.php&amp;forwardurl=http%3A%2F%2Fwww.owasp.org</uri>
  <param>forwardurl</param>
  <attack>http://www.owasp.org</attack>
  <otherinfo>The response contains a redirect in its meta http-equiv tag for 'Refresh' which allows an external Url to be set.</otherinfo>
  <evidence>http://www.owasp.org</evidence>
  <solution>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
	
	When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as "red" or "blue."
	
	Use a whitelist of approved URLs or domains to be used for redirection.
	
	Use an intermediate disclaimer page that provides the user with a clear warning that they are leaving your site. Implement a long timeout before the redirect occurs, or force the user to click on the link. Be careful to avoid XSS problems when generating the disclaimer page.
	
	When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.
	
	For example, ID 1 could map to "/login.asp" and ID 2 could map to "http://www.example.com/". Features such as the ESAPI AccessReferenceMap provide this capability.
	
	Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.
	
	Many open redirect problems occur because the programmer assumed that certain inputs could not be modified, such as cookies and hidden form fields.
	</solution>
  <otherinfo>The response contains a redirect in its meta http-equiv tag for 'Refresh' which allows an external Url to be set.
	</otherinfo>
  <reference>http://projects.webappsec.org/URL-Redirector-Abuse
	http://cwe.mitre.org/data/definitions/601.html
	</reference>
  <cweid>601</cweid>
  <wascid>38</wascid>
</alertitem>
<alertitem>
  <pluginid>40008</pluginid>
  <alert>Parameter tampering</alert>
  <riskcode>2</riskcode>
  <reliability>1</reliability>
  <riskdesc>Medium (Suspicious)</riskdesc>
  <desc>Certain parameter caused error page or Java stacktrace to be displayed.  This indicated lack of exception handling and potential areas for further exploit.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=%40</uri>
  <param>page</param>
  <attack> on line &lt;b&gt;</attack>
  <otherinfo>@</otherinfo>
  <solution>Identify the cause of the error and fix it.  Do not trust client side input and enforece tight check in the server side.  Besides, catch the exception properly.  Use a generic 500 error page for internal server error.
	</solution>
  <otherinfo>@
	</otherinfo>
  <reference>
	</reference>
  <cweid>472</cweid>
  <wascid>20</wascid>
</alertitem>
<alertitem>
  <pluginid>40008</pluginid>
  <alert>Parameter tampering</alert>
  <riskcode>2</riskcode>
  <reliability>1</reliability>
  <riskdesc>Medium (Suspicious)</riskdesc>
  <desc>Certain parameter caused error page or Java stacktrace to be displayed.  This indicated lack of exception handling and potential areas for further exploit.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?username=anonymous&amp;page=%40</uri>
  <param>page</param>
  <attack> on line &lt;b&gt;</attack>
  <otherinfo>@</otherinfo>
  <solution>Identify the cause of the error and fix it.  Do not trust client side input and enforece tight check in the server side.  Besides, catch the exception properly.  Use a generic 500 error page for internal server error.
	</solution>
  <otherinfo>@
	</otherinfo>
  <reference>
	</reference>
  <cweid>472</cweid>
  <wascid>20</wascid>
</alertitem>
<alertitem>
  <pluginid>40008</pluginid>
  <alert>Parameter tampering</alert>
  <riskcode>2</riskcode>
  <reliability>1</reliability>
  <riskdesc>Medium (Suspicious)</riskdesc>
  <desc>Certain parameter caused error page or Java stacktrace to be displayed.  This indicated lack of exception handling and potential areas for further exploit.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?=</uri>
  <param>page</param>
  <attack> on line &lt;b&gt;</attack>
  <otherinfo/>
  <solution>Identify the cause of the error and fix it.  Do not trust client side input and enforece tight check in the server side.  Besides, catch the exception properly.  Use a generic 500 error page for internal server error.
	</solution>
  <reference>
	</reference>
  <cweid>472</cweid>
  <wascid>20</wascid>
</alertitem>
<alertitem>
  <pluginid>40008</pluginid>
  <alert>Parameter tampering</alert>
  <riskcode>2</riskcode>
  <reliability>1</reliability>
  <riskdesc>Medium (Suspicious)</riskdesc>
  <desc>Certain parameter caused error page or Java stacktrace to be displayed.  This indicated lack of exception handling and potential areas for further exploit.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=login.php</uri>
  <param>username</param>
  <attack> on line &lt;b&gt;</attack>
  <otherinfo/>
  <solution>Identify the cause of the error and fix it.  Do not trust client side input and enforece tight check in the server side.  Besides, catch the exception properly.  Use a generic 500 error page for internal server error.
	</solution>
  <reference>
	</reference>
  <cweid>472</cweid>
  <wascid>20</wascid>
</alertitem>
<alertitem>
  <pluginid>40008</pluginid>
  <alert>Parameter tampering</alert>
  <riskcode>2</riskcode>
  <reliability>1</reliability>
  <riskdesc>Medium (Suspicious)</riskdesc>
  <desc>Certain parameter caused error page or Java stacktrace to be displayed.  This indicated lack of exception handling and potential areas for further exploit.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=%40&amp;forwardurl=https%3A%2F%2Faddons.mozilla.org%2Fen-US%2Ffirefox%2Fcollections%2Fjdruin%2Fpr%2F</uri>
  <param>page</param>
  <attack> on line &lt;b&gt;</attack>
  <otherinfo>@</otherinfo>
  <solution>Identify the cause of the error and fix it.  Do not trust client side input and enforece tight check in the server side.  Besides, catch the exception properly.  Use a generic 500 error page for internal server error.
	</solution>
  <otherinfo>@
	</otherinfo>
  <reference>
	</reference>
  <cweid>472</cweid>
  <wascid>20</wascid>
</alertitem>
<alertitem>
  <pluginid>40008</pluginid>
  <alert>Parameter tampering</alert>
  <riskcode>2</riskcode>
  <reliability>1</reliability>
  <riskdesc>Medium (Suspicious)</riskdesc>
  <desc>Certain parameter caused error page or Java stacktrace to be displayed.  This indicated lack of exception handling and potential areas for further exploit.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=login.php</uri>
  <param>password</param>
  <attack> on line &lt;b&gt;</attack>
  <otherinfo/>
  <solution>Identify the cause of the error and fix it.  Do not trust client side input and enforece tight check in the server side.  Besides, catch the exception properly.  Use a generic 500 error page for internal server error.
	</solution>
  <reference>
	</reference>
  <cweid>472</cweid>
  <wascid>20</wascid>
</alertitem>
<alertitem>
  <pluginid>40008</pluginid>
  <alert>Parameter tampering</alert>
  <riskcode>2</riskcode>
  <reliability>1</reliability>
  <riskdesc>Medium (Suspicious)</riskdesc>
  <desc>Certain parameter caused error page or Java stacktrace to be displayed.  This indicated lack of exception handling and potential areas for further exploit.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?username=ZAP&amp;page=%40&amp;user-info-php-submit-button=View+Account+Details&amp;password=ZAP</uri>
  <param>page</param>
  <attack> on line &lt;b&gt;</attack>
  <otherinfo>@</otherinfo>
  <solution>Identify the cause of the error and fix it.  Do not trust client side input and enforece tight check in the server side.  Besides, catch the exception properly.  Use a generic 500 error page for internal server error.
	</solution>
  <otherinfo>@
	</otherinfo>
  <reference>
	</reference>
  <cweid>472</cweid>
  <wascid>20</wascid>
</alertitem>
<alertitem>
  <pluginid>40008</pluginid>
  <alert>Parameter tampering</alert>
  <riskcode>2</riskcode>
  <reliability>1</reliability>
  <riskdesc>Medium (Suspicious)</riskdesc>
  <desc>Certain parameter caused error page or Java stacktrace to be displayed.  This indicated lack of exception handling and potential areas for further exploit.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?user-poll-php-submit-button=Submit+Vote&amp;page=%40&amp;initials=ZAP&amp;choice=nmap</uri>
  <param>page</param>
  <attack> on line &lt;b&gt;</attack>
  <otherinfo>@</otherinfo>
  <solution>Identify the cause of the error and fix it.  Do not trust client side input and enforece tight check in the server side.  Besides, catch the exception properly.  Use a generic 500 error page for internal server error.
	</solution>
  <otherinfo>@
	</otherinfo>
  <reference>
	</reference>
  <cweid>472</cweid>
  <wascid>20</wascid>
</alertitem>
<alertitem>
  <pluginid>40008</pluginid>
  <alert>Parameter tampering</alert>
  <riskcode>2</riskcode>
  <reliability>1</reliability>
  <riskdesc>Medium (Suspicious)</riskdesc>
  <desc>Certain parameter caused error page or Java stacktrace to be displayed.  This indicated lack of exception handling and potential areas for further exploit.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=source-viewer.php</uri>
  <param>page</param>
  <attack> on line &lt;b&gt;</attack>
  <otherinfo>@</otherinfo>
  <solution>Identify the cause of the error and fix it.  Do not trust client side input and enforece tight check in the server side.  Besides, catch the exception properly.  Use a generic 500 error page for internal server error.
	</solution>
  <otherinfo>@
	</otherinfo>
  <reference>
	</reference>
  <cweid>472</cweid>
  <wascid>20</wascid>
</alertitem>
<alertitem>
  <pluginid>40008</pluginid>
  <alert>Parameter tampering</alert>
  <riskcode>2</riskcode>
  <reliability>1</reliability>
  <riskdesc>Medium (Suspicious)</riskdesc>
  <desc>Certain parameter caused error page or Java stacktrace to be displayed.  This indicated lack of exception handling and potential areas for further exploit.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=source-viewer.php</uri>
  <param>phpfile</param>
  <attack> on line &lt;b&gt;</attack>
  <otherinfo/>
  <solution>Identify the cause of the error and fix it.  Do not trust client side input and enforece tight check in the server side.  Besides, catch the exception properly.  Use a generic 500 error page for internal server error.
	</solution>
  <reference>
	</reference>
  <cweid>472</cweid>
  <wascid>20</wascid>
</alertitem>
<alertitem>
  <pluginid>40008</pluginid>
  <alert>Parameter tampering</alert>
  <riskcode>2</riskcode>
  <reliability>1</reliability>
  <riskdesc>Medium (Suspicious)</riskdesc>
  <desc>Certain parameter caused error page or Java stacktrace to be displayed.  This indicated lack of exception handling and potential areas for further exploit.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=text-file-viewer.php</uri>
  <param>textfile</param>
  <attack> on line &lt;b&gt;</attack>
  <otherinfo>@</otherinfo>
  <solution>Identify the cause of the error and fix it.  Do not trust client side input and enforece tight check in the server side.  Besides, catch the exception properly.  Use a generic 500 error page for internal server error.
	</solution>
  <otherinfo>@
	</otherinfo>
  <reference>
	</reference>
  <cweid>472</cweid>
  <wascid>20</wascid>
</alertitem>
<alertitem>
  <pluginid>40008</pluginid>
  <alert>Parameter tampering</alert>
  <riskcode>2</riskcode>
  <reliability>1</reliability>
  <riskdesc>Medium (Suspicious)</riskdesc>
  <desc>Certain parameter caused error page or Java stacktrace to be displayed.  This indicated lack of exception handling and potential areas for further exploit.
	</desc>
  <uri>http://172.16.162.128/mutillidae/index.php?page=text-file-viewer.php</uri>
  <param>text-file-viewer-php-submit-button</param>
  <attack> on line &lt;b&gt;</attack>
  <otherinfo>@</otherinfo>
  <solution>Identify the cause of the error and fix it.  Do not trust client side input and enforece tight check in the server side.  Besides, catch the exception properly.  Use a generic 500 error page for internal server error.
	</solution>
  <otherinfo>@
	</otherinfo>
  <reference>
	</reference>
  <cweid>472</cweid>
  <wascid>20</wascid>
</alertitem>
</alerts></site></OWASPZAPReport>
